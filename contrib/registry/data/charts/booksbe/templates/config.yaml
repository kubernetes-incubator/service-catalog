apiVersion: v1
kind: ConfigMap
metadata:
  name: {{template "fullname" .}}
  namespace: default
data:
  bookstore.sql: |
    DELIMITER ;;

    CREATE TABLE IF NOT EXISTS shelves (
        id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
        theme VARCHAR(1024) NOT NULL
        )
    ;;

    CREATE TABLE IF NOT EXISTS books (
        id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
        shelf BIGINT UNSIGNED NOT NULL,
        author VARCHAR(1024) NOT NULL,
        title VARCHAR(1024) NOT NULL,
        CONSTRAINT FOREIGN KEY (shelf) REFERENCES shelves(id)
            ON DELETE CASCADE
            ON UPDATE CASCADE
        )
    ;;

    DROP PROCEDURE IF EXISTS list_shelves;;
    CREATE PROCEDURE list_shelves()
    BEGIN
        SELECT * FROM shelves;
    END
    ;;

    DROP PROCEDURE IF EXISTS create_shelf;;
    CREATE PROCEDURE create_shelf(IN t VARCHAR(1024), OUT id BIGINT)
    BEGIN
       INSERT INTO shelves (theme) VALUES (t);
       SELECT LAST_INSERT_ID() INTO id;
    END
    ;;

    DROP PROCEDURE IF EXISTS get_shelf;;
    CREATE PROCEDURE get_shelf(IN id BIGINT)
    BEGIN
        SELECT * FROM shelves WHERE shelves.id=id;
    END
    ;;

    DROP PROCEDURE IF EXISTS delete_shelf;;
    CREATE PROCEDURE delete_shelf(IN id BIGINT, OUT valid BOOLEAN)
    BEGIN
        SELECT COUNT(1) > 0 FROM shelves WHERE shelves.id=id INTO valid;
        DELETE FROM shelves WHERE shelves.id=id;
    END
    ;;

    DROP PROCEDURE IF EXISTS list_books;;
    CREATE PROCEDURE list_books(IN shelf BIGINT, OUT valid BOOLEAN)
    BEGIN
        SELECT COUNT(1) > 0 FROM shelves WHERE shelves.id=shelf INTO valid;
        SELECT * FROM books WHERE books.shelf=shelf;
    END
    ;;

    DROP PROCEDURE IF EXISTS create_book;;
    CREATE PROCEDURE create_book(IN shelf BIGINT, IN author VARCHAR(1024), IN title VARCHAR(1024), OUT valid BOOLEAN, OUT id BIGINT)
    BEGIN
        SET id = 0;
        SELECT COUNT(1) > 0 FROM shelves WHERE shelves.id=shelf INTO valid;
        IF valid = TRUE THEN BEGIN
          INSERT INTO books (shelf, author, title) VALUES (shelf, author, title);
          SELECT LAST_INSERT_ID() INTO id;
        END;
        END IF;
    END
    ;;

    DROP PROCEDURE IF EXISTS get_book;;
    CREATE PROCEDURE get_book(IN shelf BIGINT, IN id BIGINT)
    BEGIN
        SELECT * FROM books WHERE books.id=id AND books.shelf=shelf;
    END
    ;;

    DROP PROCEDURE IF EXISTS delete_book;;
    CREATE PROCEDURE delete_book(IN shelf BIGINT, IN id BIGINT, OUT valid BOOLEAN)
    BEGIN
        SELECT COUNT(1) > 0 from shelves WHERE shelves.id=shelf INTO valid;
        DELETE FROM books WHERE books.id=id AND books.shelf=shelf;
    END
    ;;

    DROP PROCEDURE IF EXISTS initialize_database;;
    CREATE PROCEDURE initialize_database()
    BEGIN
      SELECT COUNT(*) FROM shelves into @shelf_count;
      IF @shelf_count <= 0 THEN
          CALL create_shelf('Fiction', @fiction_id);
          CALL create_shelf('Fantasy', @fantasy_id);
          CALL create_book(@fiction_id, 'Neal Stephenson', 'REAMDE', @valid, @book_id);
          CALL create_book(@fantasy_id, 'George R.R. Martin', 'A Game of Thrones', @valid, @book_id);
      END IF;
    END
    ;;

    CALL initialize_database();;
    DROP PROCEDURE IF EXISTS initialize_database;;
