# bash completion for svcat                                -*- shell-script -*-

__svcat_debug()
{
    if [[ -n ${BASH_COMP_DEBUG_FILE} ]]; then
        echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
    fi
}

# Homebrew on Macs have version 1.3 of bash-completion which doesn't include
# _init_completion. This is a very minimal version of that function.
__svcat_init_completion()
{
    COMPREPLY=()
    _get_comp_words_by_ref "$@" cur prev words cword
}

__svcat_index_of_word()
{
    local w word=$1
    shift
    index=0
    for w in "$@"; do
        [[ $w = "$word" ]] && return
        index=$((index+1))
    done
    index=-1
}

__svcat_contains_word()
{
    local w word=$1; shift
    for w in "$@"; do
        [[ $w = "$word" ]] && return
    done
    return 1
}

__svcat_handle_reply()
{
    __svcat_debug "${FUNCNAME[0]}"
    case $cur in
        -*)
            if [[ $(type -t compopt) = "builtin" ]]; then
                compopt -o nospace
            fi
            local allflags
            if [ ${#must_have_one_flag[@]} -ne 0 ]; then
                allflags=("${must_have_one_flag[@]}")
            else
                allflags=("${flags[*]} ${two_word_flags[*]}")
            fi
            COMPREPLY=( $(compgen -W "${allflags[*]}" -- "$cur") )
            if [[ $(type -t compopt) = "builtin" ]]; then
                [[ "${COMPREPLY[0]}" == *= ]] || compopt +o nospace
            fi

            # complete after --flag=abc
            if [[ $cur == *=* ]]; then
                if [[ $(type -t compopt) = "builtin" ]]; then
                    compopt +o nospace
                fi

                local index flag
                flag="${cur%=*}"
                __svcat_index_of_word "${flag}" "${flags_with_completion[@]}"
                COMPREPLY=()
                if [[ ${index} -ge 0 ]]; then
                    PREFIX=""
                    cur="${cur#*=}"
                    ${flags_completion[${index}]}
                    if [ -n "${ZSH_VERSION}" ]; then
                        # zsh completion needs --flag= prefix
                        eval "COMPREPLY=( \"\${COMPREPLY[@]/#/${flag}=}\" )"
                    fi
                fi
            fi
            return 0;
            ;;
    esac

    # check if we are handling a flag with special work handling
    local index
    __svcat_index_of_word "${prev}" "${flags_with_completion[@]}"
    if [[ ${index} -ge 0 ]]; then
        ${flags_completion[${index}]}
        return
    fi

    # we are parsing a flag and don't have a special handler, no completion
    if [[ ${cur} != "${words[cword]}" ]]; then
        return
    fi

    local completions
    completions=("${commands[@]}")
    if [[ ${#must_have_one_noun[@]} -ne 0 ]]; then
        completions=("${must_have_one_noun[@]}")
    fi
    if [[ ${#must_have_one_flag[@]} -ne 0 ]]; then
        completions+=("${must_have_one_flag[@]}")
    fi
    COMPREPLY=( $(compgen -W "${completions[*]}" -- "$cur") )

    if [[ ${#COMPREPLY[@]} -eq 0 && ${#noun_aliases[@]} -gt 0 && ${#must_have_one_noun[@]} -ne 0 ]]; then
        COMPREPLY=( $(compgen -W "${noun_aliases[*]}" -- "$cur") )
    fi

    if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
		if declare -F __svcat_custom_func >/dev/null; then
			# try command name qualified custom func
			__svcat_custom_func
		else
			# otherwise fall back to unqualified for compatibility
			declare -F __custom_func >/dev/null && __custom_func
		fi
    fi

    # available in bash-completion >= 2, not always present on macOS
    if declare -F __ltrim_colon_completions >/dev/null; then
        __ltrim_colon_completions "$cur"
    fi

    # If there is only 1 completion and it is a flag with an = it will be completed
    # but we don't want a space after the =
    if [[ "${#COMPREPLY[@]}" -eq "1" ]] && [[ $(type -t compopt) = "builtin" ]] && [[ "${COMPREPLY[0]}" == --*= ]]; then
       compopt -o nospace
    fi
}

# The arguments should be in the form "ext1|ext2|extn"
__svcat_handle_filename_extension_flag()
{
    local ext="$1"
    _filedir "@(${ext})"
}

__svcat_handle_subdirs_in_dir_flag()
{
    local dir="$1"
    pushd "${dir}" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1
}

__svcat_handle_flag()
{
    __svcat_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    # if a command required a flag, and we found it, unset must_have_one_flag()
    local flagname=${words[c]}
    local flagvalue
    # if the word contained an =
    if [[ ${words[c]} == *"="* ]]; then
        flagvalue=${flagname#*=} # take in as flagvalue after the =
        flagname=${flagname%=*} # strip everything after the =
        flagname="${flagname}=" # but put the = back
    fi
    __svcat_debug "${FUNCNAME[0]}: looking for ${flagname}"
    if __svcat_contains_word "${flagname}" "${must_have_one_flag[@]}"; then
        must_have_one_flag=()
    fi

    # if you set a flag which only applies to this command, don't show subcommands
    if __svcat_contains_word "${flagname}" "${local_nonpersistent_flags[@]}"; then
      commands=()
    fi

    # keep flag value with flagname as flaghash
    # flaghash variable is an associative array which is only supported in bash > 3.
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        if [ -n "${flagvalue}" ] ; then
            flaghash[${flagname}]=${flagvalue}
        elif [ -n "${words[ $((c+1)) ]}" ] ; then
            flaghash[${flagname}]=${words[ $((c+1)) ]}
        else
            flaghash[${flagname}]="true" # pad "true" for bool flag
        fi
    fi

    # skip the argument to a two word flag
    if [[ ${words[c]} != *"="* ]] && __svcat_contains_word "${words[c]}" "${two_word_flags[@]}"; then
			  __svcat_debug "${FUNCNAME[0]}: found a flag ${words[c]}, skip the next argument"
        c=$((c+1))
        # if we are looking for a flags value, don't show commands
        if [[ $c -eq $cword ]]; then
            commands=()
        fi
    fi

    c=$((c+1))

}

__svcat_handle_noun()
{
    __svcat_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    if __svcat_contains_word "${words[c]}" "${must_have_one_noun[@]}"; then
        must_have_one_noun=()
    elif __svcat_contains_word "${words[c]}" "${noun_aliases[@]}"; then
        must_have_one_noun=()
    fi

    nouns+=("${words[c]}")
    c=$((c+1))
}

__svcat_handle_command()
{
    __svcat_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    local next_command
    if [[ -n ${last_command} ]]; then
        next_command="_${last_command}_${words[c]//:/__}"
    else
        if [[ $c -eq 0 ]]; then
            next_command="_svcat_root_command"
        else
            next_command="_${words[c]//:/__}"
        fi
    fi
    c=$((c+1))
    __svcat_debug "${FUNCNAME[0]}: looking for ${next_command}"
    declare -F "$next_command" >/dev/null && $next_command
}

__svcat_handle_word()
{
    if [[ $c -ge $cword ]]; then
        __svcat_handle_reply
        return
    fi
    __svcat_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
    if [[ "${words[c]}" == -* ]]; then
        __svcat_handle_flag
    elif __svcat_contains_word "${words[c]}" "${commands[@]}"; then
        __svcat_handle_command
    elif [[ $c -eq 0 ]]; then
        __svcat_handle_command
    elif __svcat_contains_word "${words[c]}" "${command_aliases[@]}"; then
        # aliashash variable is an associative array which is only supported in bash > 3.
        if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
            words[c]=${aliashash[${words[c]}]}
            __svcat_handle_command
        else
            __svcat_handle_noun
        fi
    else
        __svcat_handle_noun
    fi
    __svcat_handle_word
}

_svcat_bind()
{
    last_command="svcat_bind"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--external-id=")
    two_word_flags+=("--external-id")
    local_nonpersistent_flags+=("--external-id=")
    flags+=("--interval=")
    two_word_flags+=("--interval")
    local_nonpersistent_flags+=("--interval=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--param=")
    two_word_flags+=("--param")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--param=")
    flags+=("--params-json=")
    two_word_flags+=("--params-json")
    local_nonpersistent_flags+=("--params-json=")
    flags+=("--secret=")
    two_word_flags+=("--secret")
    two_word_flags+=("-s")
    local_nonpersistent_flags+=("--secret=")
    flags+=("--secret-name=")
    two_word_flags+=("--secret-name")
    local_nonpersistent_flags+=("--secret-name=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_completion()
{
    last_command="svcat_completion"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--help")
    flags+=("-h")
    local_nonpersistent_flags+=("--help")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    must_have_one_noun+=("bash")
    must_have_one_noun+=("zsh")
    noun_aliases=()
}

_svcat_create_class()
{
    last_command="svcat_create_class"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--from=")
    two_word_flags+=("--from")
    two_word_flags+=("-f")
    local_nonpersistent_flags+=("--from=")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--scope=")
    two_word_flags+=("--scope")
    local_nonpersistent_flags+=("--scope=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_flag+=("--from=")
    must_have_one_flag+=("-f")
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_create()
{
    last_command="svcat_create"

    command_aliases=()

    commands=()
    commands+=("class")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_deprovision()
{
    last_command="svcat_deprovision"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--abandon")
    local_nonpersistent_flags+=("--abandon")
    flags+=("--interval=")
    two_word_flags+=("--interval")
    local_nonpersistent_flags+=("--interval=")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--yes")
    flags+=("-y")
    local_nonpersistent_flags+=("--yes")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_deregister()
{
    last_command="svcat_deregister"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--interval=")
    two_word_flags+=("--interval")
    local_nonpersistent_flags+=("--interval=")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--scope=")
    two_word_flags+=("--scope")
    local_nonpersistent_flags+=("--scope=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_describe_binding()
{
    last_command="svcat_describe_binding"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--show-secrets")
    local_nonpersistent_flags+=("--show-secrets")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_describe_broker()
{
    last_command="svcat_describe_broker"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--scope=")
    two_word_flags+=("--scope")
    local_nonpersistent_flags+=("--scope=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_describe_class()
{
    last_command="svcat_describe_class"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    local_nonpersistent_flags+=("--all-namespaces")
    flags+=("--kube-name")
    flags+=("-k")
    local_nonpersistent_flags+=("--kube-name")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--scope=")
    two_word_flags+=("--scope")
    local_nonpersistent_flags+=("--scope=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_describe_instance()
{
    last_command="svcat_describe_instance"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_describe_plan()
{
    last_command="svcat_describe_plan"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--kube-name")
    flags+=("-k")
    local_nonpersistent_flags+=("--kube-name")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--scope=")
    two_word_flags+=("--scope")
    local_nonpersistent_flags+=("--scope=")
    flags+=("--show-schemas")
    local_nonpersistent_flags+=("--show-schemas")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_describe()
{
    last_command="svcat_describe"

    command_aliases=()

    commands=()
    commands+=("binding")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("bindings")
        aliashash["bindings"]="binding"
        command_aliases+=("bnd")
        aliashash["bnd"]="binding"
    fi
    commands+=("broker")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("brk")
        aliashash["brk"]="broker"
        command_aliases+=("brokers")
        aliashash["brokers"]="broker"
    fi
    commands+=("class")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("cl")
        aliashash["cl"]="class"
        command_aliases+=("classes")
        aliashash["classes"]="class"
    fi
    commands+=("instance")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("inst")
        aliashash["inst"]="instance"
        command_aliases+=("instances")
        aliashash["instances"]="instance"
    fi
    commands+=("plan")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("pl")
        aliashash["pl"]="plan"
        command_aliases+=("plans")
        aliashash["plans"]="plan"
    fi

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_get_bindings()
{
    last_command="svcat_get_bindings"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    local_nonpersistent_flags+=("--all-namespaces")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_get_brokers()
{
    last_command="svcat_get_brokers"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    local_nonpersistent_flags+=("--all-namespaces")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output=")
    flags+=("--scope=")
    two_word_flags+=("--scope")
    local_nonpersistent_flags+=("--scope=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_get_classes()
{
    last_command="svcat_get_classes"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    local_nonpersistent_flags+=("--all-namespaces")
    flags+=("--broker=")
    two_word_flags+=("--broker")
    two_word_flags+=("-b")
    local_nonpersistent_flags+=("--broker=")
    flags+=("--kube-name")
    flags+=("-k")
    local_nonpersistent_flags+=("--kube-name")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output=")
    flags+=("--scope=")
    two_word_flags+=("--scope")
    local_nonpersistent_flags+=("--scope=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_get_instances()
{
    last_command="svcat_get_instances"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    local_nonpersistent_flags+=("--all-namespaces")
    flags+=("--class=")
    two_word_flags+=("--class")
    two_word_flags+=("-c")
    local_nonpersistent_flags+=("--class=")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output=")
    flags+=("--plan=")
    two_word_flags+=("--plan")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--plan=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_get_plans()
{
    last_command="svcat_get_plans"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    local_nonpersistent_flags+=("--all-namespaces")
    flags+=("--class=")
    two_word_flags+=("--class")
    two_word_flags+=("-c")
    local_nonpersistent_flags+=("--class=")
    flags+=("--kube-name")
    flags+=("-k")
    local_nonpersistent_flags+=("--kube-name")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output=")
    flags+=("--scope=")
    two_word_flags+=("--scope")
    local_nonpersistent_flags+=("--scope=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_get()
{
    last_command="svcat_get"

    command_aliases=()

    commands=()
    commands+=("bindings")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("binding")
        aliashash["binding"]="bindings"
        command_aliases+=("bnd")
        aliashash["bnd"]="bindings"
    fi
    commands+=("brokers")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("brk")
        aliashash["brk"]="brokers"
        command_aliases+=("broker")
        aliashash["broker"]="brokers"
    fi
    commands+=("classes")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("cl")
        aliashash["cl"]="classes"
        command_aliases+=("class")
        aliashash["class"]="classes"
    fi
    commands+=("instances")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("inst")
        aliashash["inst"]="instances"
        command_aliases+=("instance")
        aliashash["instance"]="instances"
    fi
    commands+=("plans")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("pl")
        aliashash["pl"]="plans"
        command_aliases+=("plan")
        aliashash["plan"]="plans"
    fi

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_install_plugin()
{
    last_command="svcat_install_plugin"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--plugins-path=")
    two_word_flags+=("--plugins-path")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--plugins-path=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_install()
{
    last_command="svcat_install"

    command_aliases=()

    commands=()
    commands+=("plugin")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_marketplace()
{
    last_command="svcat_marketplace"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-namespaces")
    local_nonpersistent_flags+=("--all-namespaces")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--output=")
    two_word_flags+=("--output")
    two_word_flags+=("-o")
    local_nonpersistent_flags+=("--output=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_provision()
{
    last_command="svcat_provision"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--class=")
    two_word_flags+=("--class")
    local_nonpersistent_flags+=("--class=")
    flags+=("--external-id=")
    two_word_flags+=("--external-id")
    local_nonpersistent_flags+=("--external-id=")
    flags+=("--interval=")
    two_word_flags+=("--interval")
    local_nonpersistent_flags+=("--interval=")
    flags+=("--kube-name")
    flags+=("-k")
    local_nonpersistent_flags+=("--kube-name")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--param=")
    two_word_flags+=("--param")
    two_word_flags+=("-p")
    local_nonpersistent_flags+=("--param=")
    flags+=("--params-json=")
    two_word_flags+=("--params-json")
    local_nonpersistent_flags+=("--params-json=")
    flags+=("--plan=")
    two_word_flags+=("--plan")
    local_nonpersistent_flags+=("--plan=")
    flags+=("--secret=")
    two_word_flags+=("--secret")
    two_word_flags+=("-s")
    local_nonpersistent_flags+=("--secret=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_flag+=("--class=")
    must_have_one_flag+=("--plan=")
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_register()
{
    last_command="svcat_register"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--basic-secret=")
    two_word_flags+=("--basic-secret")
    local_nonpersistent_flags+=("--basic-secret=")
    flags+=("--bearer-secret=")
    two_word_flags+=("--bearer-secret")
    local_nonpersistent_flags+=("--bearer-secret=")
    flags+=("--ca=")
    two_word_flags+=("--ca")
    local_nonpersistent_flags+=("--ca=")
    flags+=("--class-restrictions=")
    two_word_flags+=("--class-restrictions")
    local_nonpersistent_flags+=("--class-restrictions=")
    flags+=("--interval=")
    two_word_flags+=("--interval")
    local_nonpersistent_flags+=("--interval=")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--plan-restrictions=")
    two_word_flags+=("--plan-restrictions")
    local_nonpersistent_flags+=("--plan-restrictions=")
    flags+=("--relist-behavior=")
    two_word_flags+=("--relist-behavior")
    local_nonpersistent_flags+=("--relist-behavior=")
    flags+=("--relist-duration=")
    two_word_flags+=("--relist-duration")
    local_nonpersistent_flags+=("--relist-duration=")
    flags+=("--scope=")
    two_word_flags+=("--scope")
    local_nonpersistent_flags+=("--scope=")
    flags+=("--skip-tls")
    local_nonpersistent_flags+=("--skip-tls")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--url=")
    two_word_flags+=("--url")
    local_nonpersistent_flags+=("--url=")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_flag+=("--url=")
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_sync_broker()
{
    last_command="svcat_sync_broker"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--scope=")
    two_word_flags+=("--scope")
    local_nonpersistent_flags+=("--scope=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_sync()
{
    last_command="svcat_sync"

    command_aliases=()

    commands=()
    commands+=("broker")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_touch_instance()
{
    last_command="svcat_touch_instance"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_touch()
{
    last_command="svcat_touch"

    command_aliases=()

    commands=()
    commands+=("instance")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_unbind()
{
    last_command="svcat_unbind"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--abandon")
    local_nonpersistent_flags+=("--abandon")
    flags+=("--interval=")
    two_word_flags+=("--interval")
    local_nonpersistent_flags+=("--interval=")
    flags+=("--name=")
    two_word_flags+=("--name")
    local_nonpersistent_flags+=("--name=")
    flags+=("--namespace=")
    two_word_flags+=("--namespace")
    two_word_flags+=("-n")
    local_nonpersistent_flags+=("--namespace=")
    flags+=("--timeout=")
    two_word_flags+=("--timeout")
    local_nonpersistent_flags+=("--timeout=")
    flags+=("--wait")
    local_nonpersistent_flags+=("--wait")
    flags+=("--yes")
    flags+=("-y")
    local_nonpersistent_flags+=("--yes")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_version()
{
    last_command="svcat_version"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--client")
    flags+=("-c")
    local_nonpersistent_flags+=("--client")
    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_svcat_root_command()
{
    last_command="svcat"

    command_aliases=()

    commands=()
    commands+=("bind")
    commands+=("completion")
    commands+=("create")
    commands+=("deprovision")
    commands+=("deregister")
    commands+=("describe")
    commands+=("get")
    commands+=("install")
    commands+=("marketplace")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("marketplace")
        aliashash["marketplace"]="marketplace"
        command_aliases+=("mp")
        aliashash["mp"]="marketplace"
    fi
    commands+=("provision")
    commands+=("register")
    commands+=("sync")
    if [[ -z "${BASH_VERSION}" || "${BASH_VERSINFO[0]}" -gt 3 ]]; then
        command_aliases+=("relist")
        aliashash["relist"]="sync"
    fi
    commands+=("touch")
    commands+=("unbind")
    commands+=("version")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--context=")
    two_word_flags+=("--context")
    flags+=("--kubeconfig=")
    two_word_flags+=("--kubeconfig")
    flags+=("--logtostderr")
    flags+=("--v=")
    two_word_flags+=("--v")
    two_word_flags+=("-v")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

__start_svcat()
{
    local cur prev words cword
    declare -A flaghash 2>/dev/null || :
    declare -A aliashash 2>/dev/null || :
    if declare -F _init_completion >/dev/null 2>&1; then
        _init_completion -s || return
    else
        __svcat_init_completion -n "=" || return
    fi

    local c=0
    local flags=()
    local two_word_flags=()
    local local_nonpersistent_flags=()
    local flags_with_completion=()
    local flags_completion=()
    local commands=("svcat")
    local must_have_one_flag=()
    local must_have_one_noun=()
    local last_command
    local nouns=()

    __svcat_handle_word
}

if [[ $(type -t compopt) = "builtin" ]]; then
    complete -o default -F __start_svcat svcat
else
    complete -o default -o nospace -F __start_svcat svcat
fi

# ex: ts=4 sw=4 et filetype=sh
