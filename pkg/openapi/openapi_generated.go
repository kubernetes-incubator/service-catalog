// +build !ignore_autogenerated

/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	openapi "k8s.io/apimachinery/pkg/openapi"
)

func GetOpenAPIDefinitions(ref openapi.ReferenceCallback) map[string]openapi.OpenAPIDefinition {
	return map[string]openapi.OpenAPIDefinition{
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.BasicAuthConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BasicAuthConfig provides config for the basic authentication.",
					Properties: map[string]spec.Schema{
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretRef is a reference to a Secret containing information the catalog should use to authenticate to this ServiceBroker.\n\nRequired at least one of the fields: - Secret.Data[\"username\"] - username used for authentication - Secret.Data[\"password\"] - password or token needed for authentication",
								Ref:         ref("k8s.io/client-go/pkg/api/v1.ObjectReference"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/client-go/pkg/api/v1.ObjectReference"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.BearerTokenAuthConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "BearerTokenAuthConfig provides config for the bearer token authentication.",
					Properties: map[string]spec.Schema{
						"secretRef": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretRef is a reference to a Secret containing information the catalog should use to authenticate to this ServiceBroker.\n\nRequired field: - Secret.Data[\"token\"] - bearer token for authentication",
								Ref:         ref("k8s.io/client-go/pkg/api/v1.ObjectReference"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/client-go/pkg/api/v1.ObjectReference"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ParametersFromSource": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ParametersFromSource represents the source of a set of Parameters",
					Properties: map[string]spec.Schema{
						"secretKeyRef": {
							SchemaProps: spec.SchemaProps{
								Description: "The Secret key to select from. The value must be a JSON object.",
								Ref:         ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.SecretKeyReference"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.SecretKeyReference"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.SecretKeyReference": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SecretKeyReference references a key of a Secret.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "The name of the secret in the pod's namespace to select from.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"key": {
							SchemaProps: spec.SchemaProps{
								Description: "The key of the secret to select from.  Must be a valid secret key.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"name", "key"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBroker": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceBroker represents an entity that provides ServiceClasses for use in the service catalog.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Non-namespaced.  The name of this resource in etcd is in ObjectMeta.Name.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerStatus"),
							},
						},
					},
					Required: []string{"spec", "status"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerSpec", "github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerAuthInfo": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceBrokerAuthInfo is a union type that contains information on one of the authentication methods the the service catalog and brokers may support, according to the OpenServiceBroker API specification (https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md).",
					Properties: map[string]spec.Schema{
						"basic": {
							SchemaProps: spec.SchemaProps{
								Description: "Basic provides configuration for basic authentication.",
								Ref:         ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.BasicAuthConfig"),
							},
						},
						"bearer": {
							SchemaProps: spec.SchemaProps{
								Description: "BearerTokenAuthConfig provides configuration to send an opaque value as a bearer token. The value is referenced from the 'token' field of the given secret.  This value should only contain the token value and not the `Bearer` scheme.",
								Ref:         ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.BearerTokenAuthConfig"),
							},
						},
						"basicAuthSecret": {
							SchemaProps: spec.SchemaProps{
								Description: "DEPRECATED: use `Basic` field for configuring basic authentication instead. BasicAuthSecret is a reference to a Secret containing auth information the catalog should use to authenticate to this ServiceBroker using basic auth.",
								Ref:         ref("k8s.io/client-go/pkg/api/v1.ObjectReference"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.BasicAuthConfig", "github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.BearerTokenAuthConfig", "k8s.io/client-go/pkg/api/v1.ObjectReference"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceBrokerCondition contains condition information for a Broker.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of the condition, currently ('Ready').",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition, one of ('True', 'False', 'Unknown').",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "Reason is a brief machine readable explanation for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Message is a human readable description of the details of the last transition, complementing reason.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"type", "status", "lastTransitionTime", "reason", "message"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceBrokerList is a list of Brokers.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBroker"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBroker", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceBrokerSpec represents a description of a Broker.",
					Properties: map[string]spec.Schema{
						"url": {
							SchemaProps: spec.SchemaProps{
								Description: "URL is the address used to communicate with the ServiceBroker.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"authInfo": {
							SchemaProps: spec.SchemaProps{
								Description: "AuthInfo contains the data that the service catalog should use to authenticate with the ServiceBroker.",
								Ref:         ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerAuthInfo"),
							},
						},
						"insecureSkipTLSVerify": {
							SchemaProps: spec.SchemaProps{
								Description: "InsecureSkipTLSVerify disables TLS certificate verification when communicating with this Broker. This is strongly discouraged.  You should use the CABundle instead.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"caBundle": {
							SchemaProps: spec.SchemaProps{
								Description: "CABundle is a PEM encoded CA bundle which will be used to validate a Broker's serving certificate.",
								Type:        []string{"string"},
								Format:      "byte",
							},
						},
					},
					Required: []string{"url"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerAuthInfo"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceBrokerStatus represents the current status of a Broker.",
					Properties: map[string]spec.Schema{
						"conditions": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerCondition"),
										},
									},
								},
							},
						},
						"reconciledGeneration": {
							SchemaProps: spec.SchemaProps{
								Description: "ReconciledGeneration is the 'Generation' of the serviceBrokerSpec that was last processed by the controller. The reconciled generation is updated even if the controller failed to process the spec.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
					Required: []string{"conditions", "reconciledGeneration"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceBrokerCondition"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceClass": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceClass represents an offering in the service catalog.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"brokerName": {
							SchemaProps: spec.SchemaProps{
								Description: "ServiceBrokerName is the reference to the Broker that provides this ServiceClass.\n\nImmutable.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "Description is a short description of this ServiceClass.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"bindable": {
							SchemaProps: spec.SchemaProps{
								Description: "Bindable indicates whether a user can create bindings to an ServiceInstance provisioned from this service. ServicePlan has an optional field called Bindable which overrides the value of this field.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"plans": {
							SchemaProps: spec.SchemaProps{
								Description: "Plans is the list of ServicePlans for this ServiceClass.  All ServiceClasses have at least one ServicePlan.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServicePlan"),
										},
									},
								},
							},
						},
						"planUpdatable": {
							SchemaProps: spec.SchemaProps{
								Description: "PlanUpdatable indicates whether instances provisioned from this ServiceClass may change ServicePlans after being provisioned.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"externalID": {
							SchemaProps: spec.SchemaProps{
								Description: "ExternalID is the identity of this object for use with the OSB API.\n\nImmutable.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"externalMetadata": {
							SchemaProps: spec.SchemaProps{
								Description: "ExternalMetadata is a blob of information about the ServiceClass, meant to be user-facing content and display instructions.  This field may contain platform-specific conventional values.",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
							},
						},
						"tags": {
							SchemaProps: spec.SchemaProps{
								Description: "Currently, this field is ALPHA: it may change or disappear at any time and its data will not be migrated.\n\nTags is a list of strings that represent different classification attributes of the ServiceClass.  These are used in Cloud Foundry in a way similar to Kubernetes labels, but they currently have no special meaning in Kubernetes.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"requires": {
							SchemaProps: spec.SchemaProps{
								Description: "Currently, this field is ALPHA: it may change or disappear at any time and its data will not be migrated.\n\nRequires exposes a list of Cloud Foundry-specific 'permissions' that must be granted to an instance of this service within Cloud Foundry.  These 'permissions' have no meaning within Kubernetes and an ServiceInstance provisioned from this ServiceClass will not work correctly.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
					Required: []string{"brokerName", "description", "bindable", "plans", "planUpdatable", "externalID"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServicePlan", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "k8s.io/apimachinery/pkg/runtime.RawExtension"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceClassList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceClassList is a list of ServiceClasses.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceClass"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceClass", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstance": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceInstance represents a provisioned instance of a ServiceClass. Currently, the spec field cannot be changed once a ServiceInstance is created.  Spec changes submitted by users will be ignored.\n\nIn the future, this will be allowed and will represent the intention that the ServiceInstance should have the plan and/or parameters updated at the ServiceBroker.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceStatus"),
							},
						},
					},
					Required: []string{"spec", "status"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceSpec", "github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceInstanceCondition contains condition information about an Instance.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of the condition, currently ('Ready').",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition, one of ('True', 'False', 'Unknown').",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "Reason is a brief machine readable explanation for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Message is a human readable description of the details of the last transition, complementing reason.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"type", "status", "lastTransitionTime", "reason", "message"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredential": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceInstanceCredential represents a \"used by\" relationship between an application and an ServiceInstance.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredentialSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredentialStatus"),
							},
						},
					},
					Required: []string{"spec", "status"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredentialSpec", "github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredentialStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredentialCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceInstanceCredentialCondition condition information for a ServiceInstanceCredential.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of the condition, currently ('Ready').",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition, one of ('True', 'False', 'Unknown').",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "Reason is a brief machine readable explanation for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "Message is a human readable description of the details of the last transition, complementing reason.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"type", "status", "lastTransitionTime", "reason", "message"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredentialList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceInstanceCredentialList is a list of ServiceInstanceCredentials.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredential"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredential", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredentialSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceInstanceCredentialSpec represents the desired state of a ServiceInstanceCredential.\n\nThe spec field cannot be changed after a ServiceInstanceCredential is created.  Changes submitted to the spec field will be ignored.",
					Properties: map[string]spec.Schema{
						"instanceRef": {
							SchemaProps: spec.SchemaProps{
								Description: "ServiceInstanceRef is the reference to the Instance this ServiceInstanceCredential is to.\n\nImmutable.",
								Ref:         ref("k8s.io/client-go/pkg/api/v1.LocalObjectReference"),
							},
						},
						"parameters": {
							SchemaProps: spec.SchemaProps{
								Description: "Parameters is a set of the parameters to be passed to the underlying broker. The inline YAML/JSON payload to be translated into equivalent JSON object. If a top-level parameter name exists in multiples sources among `Parameters` and `ParametersFrom` fields, it is considered to be a user error in the specification",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
							},
						},
						"parametersFrom": {
							SchemaProps: spec.SchemaProps{
								Description: "List of sources to populate parameters. If a top-level parameter name exists in multiples sources among `Parameters` and `ParametersFrom` fields, it is considered to be a user error in the specification",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ParametersFromSource"),
										},
									},
								},
							},
						},
						"secretName": {
							SchemaProps: spec.SchemaProps{
								Description: "SecretName is the name of the secret to create in the ServiceInstanceCredential's namespace that will hold the credentials associated with the ServiceInstanceCredential.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"externalID": {
							SchemaProps: spec.SchemaProps{
								Description: "ExternalID is the identity of this object for use with the OSB API.\n\nImmutable.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"instanceRef", "externalID"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ParametersFromSource", "k8s.io/apimachinery/pkg/runtime.RawExtension", "k8s.io/client-go/pkg/api/v1.LocalObjectReference"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredentialStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceInstanceCredentialStatus represents the current status of a ServiceInstanceCredential.",
					Properties: map[string]spec.Schema{
						"conditions": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredentialCondition"),
										},
									},
								},
							},
						},
						"reconciledGeneration": {
							SchemaProps: spec.SchemaProps{
								Description: "ReconciledGeneration is the 'Generation' of the serviceInstanceCredentialSpec that was last processed by the controller. The reconciled generation is updated even if the controller failed to process the spec.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
					Required: []string{"conditions", "reconciledGeneration"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCredentialCondition"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceInstanceList is a list of instances.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstance"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstance", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceInstanceSpec represents the desired state of an Instance.",
					Properties: map[string]spec.Schema{
						"serviceClassName": {
							SchemaProps: spec.SchemaProps{
								Description: "ServiceClassName is the reference to the ServiceClass this ServiceInstance should be provisioned from.\n\nImmutable.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"planName": {
							SchemaProps: spec.SchemaProps{
								Description: "PlanName is the name of the ServicePlan this ServiceInstance should be provisioned from. If omitted and there is only one plan in the specified ServiceClass it will be used. If omitted and there are more than one plan in the specified ServiceClass the request will be rejected.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"parameters": {
							SchemaProps: spec.SchemaProps{
								Description: "Parameters is a set of the parameters to be passed to the underlying broker. The inline YAML/JSON payload to be translated into equivalent JSON object. If a top-level parameter name exists in multiples sources among `Parameters` and `ParametersFrom` fields, it is considered to be a user error in the specification",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
							},
						},
						"parametersFrom": {
							SchemaProps: spec.SchemaProps{
								Description: "List of sources to populate parameters. If a top-level parameter name exists in multiples sources among `Parameters` and `ParametersFrom` fields, it is considered to be a user error in the specification",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ParametersFromSource"),
										},
									},
								},
							},
						},
						"externalID": {
							SchemaProps: spec.SchemaProps{
								Description: "ExternalID is the identity of this object for use with the OSB SB API.\n\nImmutable.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
					Required: []string{"serviceClassName", "externalID"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ParametersFromSource", "k8s.io/apimachinery/pkg/runtime.RawExtension"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServiceInstanceStatus represents the current status of an Instance.",
					Properties: map[string]spec.Schema{
						"conditions": {
							SchemaProps: spec.SchemaProps{
								Description: "Conditions is an array of ServiceInstanceConditions capturing aspects of an ServiceInstance's status.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCondition"),
										},
									},
								},
							},
						},
						"asyncOpInProgress": {
							SchemaProps: spec.SchemaProps{
								Description: "AsyncOpInProgress is set to true if there is an ongoing async operation against this Service Instance in progress.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"lastOperation": {
							SchemaProps: spec.SchemaProps{
								Description: "LastOperation is the string that the broker may have returned when an async operation started, it should be sent back to the broker on poll requests as a query param.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"dashboardURL": {
							SchemaProps: spec.SchemaProps{
								Description: "DashboardURL is the URL of a web-based management user interface for the service instance.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reconciledGeneration": {
							SchemaProps: spec.SchemaProps{
								Description: "ReconciledGeneration is the 'Generation' of the serviceInstanceSpec that was last processed by the controller. The reconciled generation is updated even if the controller failed to process the spec.",
								Type:        []string{"integer"},
								Format:      "int64",
							},
						},
					},
					Required: []string{"conditions", "asyncOpInProgress", "reconciledGeneration"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServiceInstanceCondition"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1.ServicePlan": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ServicePlan represents a tier of a ServiceClass.",
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name is the CLI-friendly name of this ServicePlan.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"externalID": {
							SchemaProps: spec.SchemaProps{
								Description: "ExternalID is the identity of this object for use with the OSB API.\n\nImmutable.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"description": {
							SchemaProps: spec.SchemaProps{
								Description: "Description is a short description of this ServicePlan.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"bindable": {
							SchemaProps: spec.SchemaProps{
								Description: "Bindable indicates whether a user can create bindings to an ServiceInstance using this ServicePlan.  If set, overrides the value of the ServiceClass.Bindable field.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"free": {
							SchemaProps: spec.SchemaProps{
								Description: "Free indicates whether this plan is available at no cost.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"externalMetadata": {
							SchemaProps: spec.SchemaProps{
								Description: "ExternalMetadata is a blob of information about the plan, meant to be user-facing content and display instructions.  This field may contain platform-specific conventional values.",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
							},
						},
						"instanceCreateParameterSchema": {
							SchemaProps: spec.SchemaProps{
								Description: "Currently, this field is ALPHA: it may change or disappear at any time and its data will not be migrated.\n\nServiceInstanceCreateParameterSchema is the schema for the parameters that may be supplied when provisioning a new ServiceInstance on this plan.",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
							},
						},
						"instanceUpdateParameterSchema": {
							SchemaProps: spec.SchemaProps{
								Description: "Currently, this field is ALPHA: it may change or disappear at any time and its data will not be migrated.\n\nServiceInstanceUpdateParameterSchema is the schema for the parameters that may be updated once an ServiceInstance has been provisioned on this plan. This field only has meaning if the ServiceClass is PlanUpdatable.",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
							},
						},
						"serviceInstanceCredentialCreateParameterSchema": {
							SchemaProps: spec.SchemaProps{
								Description: "Currently, this field is ALPHA: it may change or disappear at any time and its data will not be migrated.\n\nServiceInstanceCredentialCreateParameterSchema is the schema for the parameters that may be supplied binding to an ServiceInstance on this plan.",
								Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
							},
						},
					},
					Required: []string{"name", "externalID", "description", "free"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/runtime.RawExtension"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/settings/v1alpha1.PodPreset": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodPreset is a policy resource that defines additional runtime requirements for a Pod.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/settings/v1alpha1.PodPresetSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/settings/v1alpha1.PodPresetSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/settings/v1alpha1.PodPresetList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodPresetList is a list of PodPreset objects.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubernetes-incubator/service-catalog/pkg/apis/settings/v1alpha1.PodPreset"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/kubernetes-incubator/service-catalog/pkg/apis/settings/v1alpha1.PodPreset", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubernetes-incubator/service-catalog/pkg/apis/settings/v1alpha1.PodPresetSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "PodPresetSpec is a description of a pod preset.",
					Properties: map[string]spec.Schema{
						"selector": {
							SchemaProps: spec.SchemaProps{
								Description: "Selector is a label query over a set of resources, in this case pods. Required.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
							},
						},
						"env": {
							SchemaProps: spec.SchemaProps{
								Description: "Env defines the collection of EnvVar to inject into containers.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.EnvVar"),
										},
									},
								},
							},
						},
						"envFrom": {
							SchemaProps: spec.SchemaProps{
								Description: "EnvFrom defines the collection of EnvFromSource to inject into containers.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.EnvFromSource"),
										},
									},
								},
							},
						},
						"volumes": {
							SchemaProps: spec.SchemaProps{
								Description: "Volumes defines the collection of Volume to inject into the pod.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.Volume"),
										},
									},
								},
							},
						},
						"volumeMounts": {
							SchemaProps: spec.SchemaProps{
								Description: "VolumeMounts defines the collection of VolumeMount to inject into containers.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("k8s.io/api/core/v1.VolumeMount"),
										},
									},
								},
							},
						},
					},
					Required: []string{"selector"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.EnvFromSource", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.Volume", "k8s.io/api/core/v1.VolumeMount", "k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
		},
	}
}
