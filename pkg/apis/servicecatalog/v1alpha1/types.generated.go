/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1alpha1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg1_v1 "k8s.io/kubernetes/pkg/apis/meta/v1"
	pkg4_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_v1.ObjectMeta
		var v1 pkg1_v1.TypeMeta
		var v2 pkg4_runtime.RawExtension
		var v3 pkg3_types.UID
		var v4 time.Time
		_, _, _, _, _ = v0, v1, v2, v3, v4
	}
}

func (x *Broker) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yy10.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy11 := &x.ObjectMeta
					yy11.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy13 := &x.Spec
				yy13.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy14 := &x.Spec
				yy14.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy16 := &x.Status
				yy16.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy17 := &x.Status
				yy17.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Broker) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym18 := z.DecBinary()
	_ = yym18
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct19 := r.ContainerType()
		if yyct19 == codecSelferValueTypeMap1234 {
			yyl19 := r.ReadMapStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl19, d)
			}
		} else if yyct19 == codecSelferValueTypeArray1234 {
			yyl19 := r.ReadArrayStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl19, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Broker) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys20Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys20Slc
	var yyhl20 bool = l >= 0
	for yyj20 := 0; ; yyj20++ {
		if yyhl20 {
			if yyj20 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys20Slc = r.DecodeBytes(yys20Slc, true, true)
		yys20 := string(yys20Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys20 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv23 := &x.ObjectMeta
				yyv23.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = BrokerSpec{}
			} else {
				yyv24 := &x.Spec
				yyv24.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = BrokerStatus{}
			} else {
				yyv25 := &x.Status
				yyv25.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys20)
		} // end switch yys20
	} // end for yyj20
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Broker) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv29 := &x.ObjectMeta
		yyv29.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = BrokerSpec{}
	} else {
		yyv30 := &x.Spec
		yyv30.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = BrokerStatus{}
	} else {
		yyv31 := &x.Status
		yyv31.CodecDecodeSelf(d)
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym32 := z.EncBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep33 := !z.EncBinary()
			yy2arr33 := z.EncBasicHandle().StructToArray
			var yyq33 [4]bool
			_, _, _ = yysep33, yyq33, yy2arr33
			const yyr33 bool = false
			yyq33[0] = x.Kind != ""
			yyq33[1] = x.APIVersion != ""
			yyq33[2] = true
			var yynn33 int
			if yyr33 || yy2arr33 {
				r.EncodeArrayStart(4)
			} else {
				yynn33 = 1
				for _, b := range yyq33 {
					if b {
						yynn33++
					}
				}
				r.EncodeMapStart(yynn33)
				yynn33 = 0
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[0] {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq33[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[1] {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq33[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[2] {
					yy41 := &x.ListMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.ListMeta
					yym44 := z.EncBinary()
					_ = yym44
					if false {
					} else if z.HasExtensions() && z.EncExt(yy43) {
					} else {
						z.EncFallback(yy43)
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						h.encSliceBroker(([]Broker)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						h.encSliceBroker(([]Broker)(x.Items), e)
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym48 := z.DecBinary()
	_ = yym48
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct49 := r.ContainerType()
		if yyct49 == codecSelferValueTypeMap1234 {
			yyl49 := r.ReadMapStart()
			if yyl49 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl49, d)
			}
		} else if yyct49 == codecSelferValueTypeArray1234 {
			yyl49 := r.ReadArrayStart()
			if yyl49 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl49, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys50Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys50Slc
	var yyhl50 bool = l >= 0
	for yyj50 := 0; ; yyj50++ {
		if yyhl50 {
			if yyj50 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys50Slc = r.DecodeBytes(yys50Slc, true, true)
		yys50 := string(yys50Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys50 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv53 := &x.ListMeta
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv55 := &x.Items
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else {
					h.decSliceBroker((*[]Broker)(yyv55), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys50)
		} // end switch yys50
	} // end for yyj50
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj57 int
	var yyb57 bool
	var yyhl57 bool = l >= 0
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv60 := &x.ListMeta
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv60) {
		} else {
			z.DecFallback(yyv60, false)
		}
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv62 := &x.Items
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else {
			h.decSliceBroker((*[]Broker)(yyv62), d)
		}
	}
	for {
		yyj57++
		if yyhl57 {
			yyb57 = yyj57 > l
		} else {
			yyb57 = r.CheckBreak()
		}
		if yyb57 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj57-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym64 := z.EncBinary()
		_ = yym64
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep65 := !z.EncBinary()
			yy2arr65 := z.EncBasicHandle().StructToArray
			var yyq65 [2]bool
			_, _, _ = yysep65, yyq65, yy2arr65
			const yyr65 bool = false
			yyq65[1] = x.AuthSecret != nil
			var yynn65 int
			if yyr65 || yy2arr65 {
				r.EncodeArrayStart(2)
			} else {
				yynn65 = 1
				for _, b := range yyq65 {
					if b {
						yynn65++
					}
				}
				r.EncodeMapStart(yynn65)
				yynn65 = 0
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym67 := z.EncBinary()
				_ = yym67
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.URL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("url"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym68 := z.EncBinary()
				_ = yym68
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.URL))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq65[1] {
					if x.AuthSecret == nil {
						r.EncodeNil()
					} else {
						x.AuthSecret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq65[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("authSecret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AuthSecret == nil {
						r.EncodeNil()
					} else {
						x.AuthSecret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym70 := z.DecBinary()
	_ = yym70
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct71 := r.ContainerType()
		if yyct71 == codecSelferValueTypeMap1234 {
			yyl71 := r.ReadMapStart()
			if yyl71 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl71, d)
			}
		} else if yyct71 == codecSelferValueTypeArray1234 {
			yyl71 := r.ReadArrayStart()
			if yyl71 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl71, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys72Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys72Slc
	var yyhl72 bool = l >= 0
	for yyj72 := 0; ; yyj72++ {
		if yyhl72 {
			if yyj72 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys72Slc = r.DecodeBytes(yys72Slc, true, true)
		yys72 := string(yys72Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys72 {
		case "url":
			if r.TryDecodeAsNil() {
				x.URL = ""
			} else {
				x.URL = string(r.DecodeString())
			}
		case "authSecret":
			if r.TryDecodeAsNil() {
				if x.AuthSecret != nil {
					x.AuthSecret = nil
				}
			} else {
				if x.AuthSecret == nil {
					x.AuthSecret = new(pkg2_v1.ObjectReference)
				}
				x.AuthSecret.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys72)
		} // end switch yys72
	} // end for yyj72
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj75 int
	var yyb75 bool
	var yyhl75 bool = l >= 0
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.URL = ""
	} else {
		x.URL = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AuthSecret != nil {
			x.AuthSecret = nil
		}
	} else {
		if x.AuthSecret == nil {
			x.AuthSecret = new(pkg2_v1.ObjectReference)
		}
		x.AuthSecret.CodecDecodeSelf(d)
	}
	for {
		yyj75++
		if yyhl75 {
			yyb75 = yyj75 > l
		} else {
			yyb75 = r.CheckBreak()
		}
		if yyb75 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj75-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym78 := z.EncBinary()
		_ = yym78
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep79 := !z.EncBinary()
			yy2arr79 := z.EncBasicHandle().StructToArray
			var yyq79 [1]bool
			_, _, _ = yysep79, yyq79, yy2arr79
			const yyr79 bool = false
			var yynn79 int
			if yyr79 || yy2arr79 {
				r.EncodeArrayStart(1)
			} else {
				yynn79 = 1
				for _, b := range yyq79 {
					if b {
						yynn79++
					}
				}
				r.EncodeMapStart(yynn79)
				yynn79 = 0
			}
			if yyr79 || yy2arr79 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym81 := z.EncBinary()
					_ = yym81
					if false {
					} else {
						h.encSliceBrokerCondition(([]BrokerCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym82 := z.EncBinary()
					_ = yym82
					if false {
					} else {
						h.encSliceBrokerCondition(([]BrokerCondition)(x.Conditions), e)
					}
				}
			}
			if yyr79 || yy2arr79 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym83 := z.DecBinary()
	_ = yym83
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct84 := r.ContainerType()
		if yyct84 == codecSelferValueTypeMap1234 {
			yyl84 := r.ReadMapStart()
			if yyl84 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl84, d)
			}
		} else if yyct84 == codecSelferValueTypeArray1234 {
			yyl84 := r.ReadArrayStart()
			if yyl84 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl84, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys85Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys85Slc
	var yyhl85 bool = l >= 0
	for yyj85 := 0; ; yyj85++ {
		if yyhl85 {
			if yyj85 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys85Slc = r.DecodeBytes(yys85Slc, true, true)
		yys85 := string(yys85Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys85 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv86 := &x.Conditions
				yym87 := z.DecBinary()
				_ = yym87
				if false {
				} else {
					h.decSliceBrokerCondition((*[]BrokerCondition)(yyv86), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys85)
		} // end switch yys85
	} // end for yyj85
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj88 int
	var yyb88 bool
	var yyhl88 bool = l >= 0
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv89 := &x.Conditions
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			h.decSliceBrokerCondition((*[]BrokerCondition)(yyv89), d)
		}
	}
	for {
		yyj88++
		if yyhl88 {
			yyb88 = yyj88 > l
		} else {
			yyb88 = r.CheckBreak()
		}
		if yyb88 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj88-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym91 := z.EncBinary()
		_ = yym91
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep92 := !z.EncBinary()
			yy2arr92 := z.EncBasicHandle().StructToArray
			var yyq92 [4]bool
			_, _, _ = yysep92, yyq92, yy2arr92
			const yyr92 bool = false
			var yynn92 int
			if yyr92 || yy2arr92 {
				r.EncodeArrayStart(4)
			} else {
				yynn92 = 4
				for _, b := range yyq92 {
					if b {
						yynn92++
					}
				}
				r.EncodeMapStart(yynn92)
				yynn92 = 0
			}
			if yyr92 || yy2arr92 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr92 || yy2arr92 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr92 || yy2arr92 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym96 := z.EncBinary()
				_ = yym96
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym97 := z.EncBinary()
				_ = yym97
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr92 || yy2arr92 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym100 := z.EncBinary()
				_ = yym100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr92 || yy2arr92 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym101 := z.DecBinary()
	_ = yym101
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct102 := r.ContainerType()
		if yyct102 == codecSelferValueTypeMap1234 {
			yyl102 := r.ReadMapStart()
			if yyl102 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl102, d)
			}
		} else if yyct102 == codecSelferValueTypeArray1234 {
			yyl102 := r.ReadArrayStart()
			if yyl102 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl102, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys103Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys103Slc
	var yyhl103 bool = l >= 0
	for yyj103 := 0; ; yyj103++ {
		if yyhl103 {
			if yyj103 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys103Slc = r.DecodeBytes(yys103Slc, true, true)
		yys103 := string(yys103Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys103 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = BrokerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys103)
		} // end switch yys103
	} // end for yyj103
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj108 int
	var yyb108 bool
	var yyhl108 bool = l >= 0
	yyj108++
	if yyhl108 {
		yyb108 = yyj108 > l
	} else {
		yyb108 = r.CheckBreak()
	}
	if yyb108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = BrokerConditionType(r.DecodeString())
	}
	yyj108++
	if yyhl108 {
		yyb108 = yyj108 > l
	} else {
		yyb108 = r.CheckBreak()
	}
	if yyb108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj108++
	if yyhl108 {
		yyb108 = yyj108 > l
	} else {
		yyb108 = r.CheckBreak()
	}
	if yyb108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj108++
	if yyhl108 {
		yyb108 = yyj108 > l
	} else {
		yyb108 = r.CheckBreak()
	}
	if yyb108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj108++
		if yyhl108 {
			yyb108 = yyj108 > l
		} else {
			yyb108 = r.CheckBreak()
		}
		if yyb108 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj108-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x BrokerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym113 := z.EncBinary()
	_ = yym113
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *BrokerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym114 := z.DecBinary()
	_ = yym114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym115 := z.EncBinary()
	_ = yym115
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym116 := z.DecBinary()
	_ = yym116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceClassList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym117 := z.EncBinary()
		_ = yym117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep118 := !z.EncBinary()
			yy2arr118 := z.EncBasicHandle().StructToArray
			var yyq118 [4]bool
			_, _, _ = yysep118, yyq118, yy2arr118
			const yyr118 bool = false
			yyq118[0] = x.Kind != ""
			yyq118[1] = x.APIVersion != ""
			yyq118[2] = true
			var yynn118 int
			if yyr118 || yy2arr118 {
				r.EncodeArrayStart(4)
			} else {
				yynn118 = 1
				for _, b := range yyq118 {
					if b {
						yynn118++
					}
				}
				r.EncodeMapStart(yynn118)
				yynn118 = 0
			}
			if yyr118 || yy2arr118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq118[0] {
					yym120 := z.EncBinary()
					_ = yym120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq118[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym121 := z.EncBinary()
					_ = yym121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr118 || yy2arr118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq118[1] {
					yym123 := z.EncBinary()
					_ = yym123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq118[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym124 := z.EncBinary()
					_ = yym124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr118 || yy2arr118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq118[2] {
					yy126 := &x.ListMeta
					yym127 := z.EncBinary()
					_ = yym127
					if false {
					} else if z.HasExtensions() && z.EncExt(yy126) {
					} else {
						z.EncFallback(yy126)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq118[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy128 := &x.ListMeta
					yym129 := z.EncBinary()
					_ = yym129
					if false {
					} else if z.HasExtensions() && z.EncExt(yy128) {
					} else {
						z.EncFallback(yy128)
					}
				}
			}
			if yyr118 || yy2arr118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym131 := z.EncBinary()
					_ = yym131
					if false {
					} else {
						h.encSliceServiceClass(([]ServiceClass)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym132 := z.EncBinary()
					_ = yym132
					if false {
					} else {
						h.encSliceServiceClass(([]ServiceClass)(x.Items), e)
					}
				}
			}
			if yyr118 || yy2arr118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceClassList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym133 := z.DecBinary()
	_ = yym133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct134 := r.ContainerType()
		if yyct134 == codecSelferValueTypeMap1234 {
			yyl134 := r.ReadMapStart()
			if yyl134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl134, d)
			}
		} else if yyct134 == codecSelferValueTypeArray1234 {
			yyl134 := r.ReadArrayStart()
			if yyl134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceClassList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys135Slc
	var yyhl135 bool = l >= 0
	for yyj135 := 0; ; yyj135++ {
		if yyhl135 {
			if yyj135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys135Slc = r.DecodeBytes(yys135Slc, true, true)
		yys135 := string(yys135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys135 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv138 := &x.ListMeta
				yym139 := z.DecBinary()
				_ = yym139
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv138) {
				} else {
					z.DecFallback(yyv138, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv140 := &x.Items
				yym141 := z.DecBinary()
				_ = yym141
				if false {
				} else {
					h.decSliceServiceClass((*[]ServiceClass)(yyv140), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys135)
		} // end switch yys135
	} // end for yyj135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceClassList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj142 int
	var yyb142 bool
	var yyhl142 bool = l >= 0
	yyj142++
	if yyhl142 {
		yyb142 = yyj142 > l
	} else {
		yyb142 = r.CheckBreak()
	}
	if yyb142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj142++
	if yyhl142 {
		yyb142 = yyj142 > l
	} else {
		yyb142 = r.CheckBreak()
	}
	if yyb142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj142++
	if yyhl142 {
		yyb142 = yyj142 > l
	} else {
		yyb142 = r.CheckBreak()
	}
	if yyb142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv145 := &x.ListMeta
		yym146 := z.DecBinary()
		_ = yym146
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv145) {
		} else {
			z.DecFallback(yyv145, false)
		}
	}
	yyj142++
	if yyhl142 {
		yyb142 = yyj142 > l
	} else {
		yyb142 = r.CheckBreak()
	}
	if yyb142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv147 := &x.Items
		yym148 := z.DecBinary()
		_ = yym148
		if false {
		} else {
			h.decSliceServiceClass((*[]ServiceClass)(yyv147), d)
		}
	}
	for {
		yyj142++
		if yyhl142 {
			yyb142 = yyj142 > l
		} else {
			yyb142 = r.CheckBreak()
		}
		if yyb142 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj142-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceClass) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym149 := z.EncBinary()
		_ = yym149
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep150 := !z.EncBinary()
			yy2arr150 := z.EncBasicHandle().StructToArray
			var yyq150 [21]bool
			_, _, _ = yysep150, yyq150, yy2arr150
			const yyr150 bool = false
			yyq150[0] = x.Kind != ""
			yyq150[1] = x.APIVersion != ""
			yyq150[2] = true
			yyq150[8] = len(x.OSBTags) != 0
			yyq150[9] = len(x.OSBRequires) != 0
			yyq150[10] = x.OSBMaxDBPerNode != nil
			yyq150[11] = x.OSBDashboardOAuth2ClientID != nil
			yyq150[12] = x.OSBDashboardSecret != nil
			yyq150[13] = x.OSBDashboardRedirectURI != nil
			yyq150[14] = x.Description != nil
			yyq150[15] = x.DisplayName != nil
			yyq150[16] = x.ImageURL != nil
			yyq150[17] = x.LongDescription != nil
			yyq150[18] = x.ProviderDisplayName != nil
			yyq150[19] = x.DocumentationURL != nil
			yyq150[20] = x.SupportURL != nil
			var yynn150 int
			if yyr150 || yy2arr150 {
				r.EncodeArrayStart(21)
			} else {
				yynn150 = 5
				for _, b := range yyq150 {
					if b {
						yynn150++
					}
				}
				r.EncodeMapStart(yynn150)
				yynn150 = 0
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[0] {
					yym152 := z.EncBinary()
					_ = yym152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq150[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym153 := z.EncBinary()
					_ = yym153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[1] {
					yym155 := z.EncBinary()
					_ = yym155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq150[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym156 := z.EncBinary()
					_ = yym156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[2] {
					yy158 := &x.ObjectMeta
					yy158.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy159 := &x.ObjectMeta
					yy159.CodecEncodeSelf(e)
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym161 := z.EncBinary()
				_ = yym161
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BrokerName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("brokerName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym162 := z.EncBinary()
				_ = yym162
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BrokerName))
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym164 := z.EncBinary()
				_ = yym164
				if false {
				} else {
					r.EncodeBool(bool(x.Bindable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bindable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym165 := z.EncBinary()
				_ = yym165
				if false {
				} else {
					r.EncodeBool(bool(x.Bindable))
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Plans == nil {
					r.EncodeNil()
				} else {
					yym167 := z.EncBinary()
					_ = yym167
					if false {
					} else {
						h.encSliceServicePlan(([]ServicePlan)(x.Plans), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("plans"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Plans == nil {
					r.EncodeNil()
				} else {
					yym168 := z.EncBinary()
					_ = yym168
					if false {
					} else {
						h.encSliceServicePlan(([]ServicePlan)(x.Plans), e)
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym170 := z.EncBinary()
				_ = yym170
				if false {
				} else {
					r.EncodeBool(bool(x.PlanUpdatable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("planUpdatable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym171 := z.EncBinary()
				_ = yym171
				if false {
				} else {
					r.EncodeBool(bool(x.PlanUpdatable))
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym173 := z.EncBinary()
				_ = yym173
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym174 := z.EncBinary()
				_ = yym174
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[8] {
					if x.OSBTags == nil {
						r.EncodeNil()
					} else {
						yym176 := z.EncBinary()
						_ = yym176
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBTags, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbTags"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBTags == nil {
						r.EncodeNil()
					} else {
						yym177 := z.EncBinary()
						_ = yym177
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBTags, false, e)
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[9] {
					if x.OSBRequires == nil {
						r.EncodeNil()
					} else {
						yym179 := z.EncBinary()
						_ = yym179
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBRequires, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbRequires"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBRequires == nil {
						r.EncodeNil()
					} else {
						yym180 := z.EncBinary()
						_ = yym180
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBRequires, false, e)
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[10] {
					if x.OSBMaxDBPerNode == nil {
						r.EncodeNil()
					} else {
						yy182 := *x.OSBMaxDBPerNode
						yym183 := z.EncBinary()
						_ = yym183
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy182))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbMaxDBPerNode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBMaxDBPerNode == nil {
						r.EncodeNil()
					} else {
						yy184 := *x.OSBMaxDBPerNode
						yym185 := z.EncBinary()
						_ = yym185
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy184))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[11] {
					if x.OSBDashboardOAuth2ClientID == nil {
						r.EncodeNil()
					} else {
						yy187 := *x.OSBDashboardOAuth2ClientID
						yym188 := z.EncBinary()
						_ = yym188
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy187))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbDashboardOAuth2ClientID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBDashboardOAuth2ClientID == nil {
						r.EncodeNil()
					} else {
						yy189 := *x.OSBDashboardOAuth2ClientID
						yym190 := z.EncBinary()
						_ = yym190
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy189))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[12] {
					if x.OSBDashboardSecret == nil {
						r.EncodeNil()
					} else {
						yy192 := *x.OSBDashboardSecret
						yym193 := z.EncBinary()
						_ = yym193
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy192))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbDashboardSecret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBDashboardSecret == nil {
						r.EncodeNil()
					} else {
						yy194 := *x.OSBDashboardSecret
						yym195 := z.EncBinary()
						_ = yym195
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy194))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[13] {
					if x.OSBDashboardRedirectURI == nil {
						r.EncodeNil()
					} else {
						yy197 := *x.OSBDashboardRedirectURI
						yym198 := z.EncBinary()
						_ = yym198
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy197))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbDashboardRedirectURI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBDashboardRedirectURI == nil {
						r.EncodeNil()
					} else {
						yy199 := *x.OSBDashboardRedirectURI
						yym200 := z.EncBinary()
						_ = yym200
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy199))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[14] {
					if x.Description == nil {
						r.EncodeNil()
					} else {
						yy202 := *x.Description
						yym203 := z.EncBinary()
						_ = yym203
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy202))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Description == nil {
						r.EncodeNil()
					} else {
						yy204 := *x.Description
						yym205 := z.EncBinary()
						_ = yym205
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy204))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[15] {
					if x.DisplayName == nil {
						r.EncodeNil()
					} else {
						yy207 := *x.DisplayName
						yym208 := z.EncBinary()
						_ = yym208
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy207))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("displayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DisplayName == nil {
						r.EncodeNil()
					} else {
						yy209 := *x.DisplayName
						yym210 := z.EncBinary()
						_ = yym210
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy209))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[16] {
					if x.ImageURL == nil {
						r.EncodeNil()
					} else {
						yy212 := *x.ImageURL
						yym213 := z.EncBinary()
						_ = yym213
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy212))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imageUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImageURL == nil {
						r.EncodeNil()
					} else {
						yy214 := *x.ImageURL
						yym215 := z.EncBinary()
						_ = yym215
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy214))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[17] {
					if x.LongDescription == nil {
						r.EncodeNil()
					} else {
						yy217 := *x.LongDescription
						yym218 := z.EncBinary()
						_ = yym218
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy217))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("longDescription"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LongDescription == nil {
						r.EncodeNil()
					} else {
						yy219 := *x.LongDescription
						yym220 := z.EncBinary()
						_ = yym220
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy219))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[18] {
					if x.ProviderDisplayName == nil {
						r.EncodeNil()
					} else {
						yy222 := *x.ProviderDisplayName
						yym223 := z.EncBinary()
						_ = yym223
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy222))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerDisplayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ProviderDisplayName == nil {
						r.EncodeNil()
					} else {
						yy224 := *x.ProviderDisplayName
						yym225 := z.EncBinary()
						_ = yym225
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy224))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[19] {
					if x.DocumentationURL == nil {
						r.EncodeNil()
					} else {
						yy227 := *x.DocumentationURL
						yym228 := z.EncBinary()
						_ = yym228
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy227))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("documentationUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DocumentationURL == nil {
						r.EncodeNil()
					} else {
						yy229 := *x.DocumentationURL
						yym230 := z.EncBinary()
						_ = yym230
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy229))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[20] {
					if x.SupportURL == nil {
						r.EncodeNil()
					} else {
						yy232 := *x.SupportURL
						yym233 := z.EncBinary()
						_ = yym233
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy232))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supportUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupportURL == nil {
						r.EncodeNil()
					} else {
						yy234 := *x.SupportURL
						yym235 := z.EncBinary()
						_ = yym235
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy234))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceClass) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym236 := z.DecBinary()
	_ = yym236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct237 := r.ContainerType()
		if yyct237 == codecSelferValueTypeMap1234 {
			yyl237 := r.ReadMapStart()
			if yyl237 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl237, d)
			}
		} else if yyct237 == codecSelferValueTypeArray1234 {
			yyl237 := r.ReadArrayStart()
			if yyl237 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl237, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceClass) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys238Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys238Slc
	var yyhl238 bool = l >= 0
	for yyj238 := 0; ; yyj238++ {
		if yyhl238 {
			if yyj238 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys238Slc = r.DecodeBytes(yys238Slc, true, true)
		yys238 := string(yys238Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys238 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv241 := &x.ObjectMeta
				yyv241.CodecDecodeSelf(d)
			}
		case "brokerName":
			if r.TryDecodeAsNil() {
				x.BrokerName = ""
			} else {
				x.BrokerName = string(r.DecodeString())
			}
		case "bindable":
			if r.TryDecodeAsNil() {
				x.Bindable = false
			} else {
				x.Bindable = bool(r.DecodeBool())
			}
		case "plans":
			if r.TryDecodeAsNil() {
				x.Plans = nil
			} else {
				yyv244 := &x.Plans
				yym245 := z.DecBinary()
				_ = yym245
				if false {
				} else {
					h.decSliceServicePlan((*[]ServicePlan)(yyv244), d)
				}
			}
		case "planUpdatable":
			if r.TryDecodeAsNil() {
				x.PlanUpdatable = false
			} else {
				x.PlanUpdatable = bool(r.DecodeBool())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbTags":
			if r.TryDecodeAsNil() {
				x.OSBTags = nil
			} else {
				yyv248 := &x.OSBTags
				yym249 := z.DecBinary()
				_ = yym249
				if false {
				} else {
					z.F.DecSliceStringX(yyv248, false, d)
				}
			}
		case "osbRequires":
			if r.TryDecodeAsNil() {
				x.OSBRequires = nil
			} else {
				yyv250 := &x.OSBRequires
				yym251 := z.DecBinary()
				_ = yym251
				if false {
				} else {
					z.F.DecSliceStringX(yyv250, false, d)
				}
			}
		case "osbMaxDBPerNode":
			if r.TryDecodeAsNil() {
				if x.OSBMaxDBPerNode != nil {
					x.OSBMaxDBPerNode = nil
				}
			} else {
				if x.OSBMaxDBPerNode == nil {
					x.OSBMaxDBPerNode = new(string)
				}
				yym253 := z.DecBinary()
				_ = yym253
				if false {
				} else {
					*((*string)(x.OSBMaxDBPerNode)) = r.DecodeString()
				}
			}
		case "osbDashboardOAuth2ClientID":
			if r.TryDecodeAsNil() {
				if x.OSBDashboardOAuth2ClientID != nil {
					x.OSBDashboardOAuth2ClientID = nil
				}
			} else {
				if x.OSBDashboardOAuth2ClientID == nil {
					x.OSBDashboardOAuth2ClientID = new(string)
				}
				yym255 := z.DecBinary()
				_ = yym255
				if false {
				} else {
					*((*string)(x.OSBDashboardOAuth2ClientID)) = r.DecodeString()
				}
			}
		case "osbDashboardSecret":
			if r.TryDecodeAsNil() {
				if x.OSBDashboardSecret != nil {
					x.OSBDashboardSecret = nil
				}
			} else {
				if x.OSBDashboardSecret == nil {
					x.OSBDashboardSecret = new(string)
				}
				yym257 := z.DecBinary()
				_ = yym257
				if false {
				} else {
					*((*string)(x.OSBDashboardSecret)) = r.DecodeString()
				}
			}
		case "osbDashboardRedirectURI":
			if r.TryDecodeAsNil() {
				if x.OSBDashboardRedirectURI != nil {
					x.OSBDashboardRedirectURI = nil
				}
			} else {
				if x.OSBDashboardRedirectURI == nil {
					x.OSBDashboardRedirectURI = new(string)
				}
				yym259 := z.DecBinary()
				_ = yym259
				if false {
				} else {
					*((*string)(x.OSBDashboardRedirectURI)) = r.DecodeString()
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				if x.Description != nil {
					x.Description = nil
				}
			} else {
				if x.Description == nil {
					x.Description = new(string)
				}
				yym261 := z.DecBinary()
				_ = yym261
				if false {
				} else {
					*((*string)(x.Description)) = r.DecodeString()
				}
			}
		case "displayName":
			if r.TryDecodeAsNil() {
				if x.DisplayName != nil {
					x.DisplayName = nil
				}
			} else {
				if x.DisplayName == nil {
					x.DisplayName = new(string)
				}
				yym263 := z.DecBinary()
				_ = yym263
				if false {
				} else {
					*((*string)(x.DisplayName)) = r.DecodeString()
				}
			}
		case "imageUrl":
			if r.TryDecodeAsNil() {
				if x.ImageURL != nil {
					x.ImageURL = nil
				}
			} else {
				if x.ImageURL == nil {
					x.ImageURL = new(string)
				}
				yym265 := z.DecBinary()
				_ = yym265
				if false {
				} else {
					*((*string)(x.ImageURL)) = r.DecodeString()
				}
			}
		case "longDescription":
			if r.TryDecodeAsNil() {
				if x.LongDescription != nil {
					x.LongDescription = nil
				}
			} else {
				if x.LongDescription == nil {
					x.LongDescription = new(string)
				}
				yym267 := z.DecBinary()
				_ = yym267
				if false {
				} else {
					*((*string)(x.LongDescription)) = r.DecodeString()
				}
			}
		case "providerDisplayName":
			if r.TryDecodeAsNil() {
				if x.ProviderDisplayName != nil {
					x.ProviderDisplayName = nil
				}
			} else {
				if x.ProviderDisplayName == nil {
					x.ProviderDisplayName = new(string)
				}
				yym269 := z.DecBinary()
				_ = yym269
				if false {
				} else {
					*((*string)(x.ProviderDisplayName)) = r.DecodeString()
				}
			}
		case "documentationUrl":
			if r.TryDecodeAsNil() {
				if x.DocumentationURL != nil {
					x.DocumentationURL = nil
				}
			} else {
				if x.DocumentationURL == nil {
					x.DocumentationURL = new(string)
				}
				yym271 := z.DecBinary()
				_ = yym271
				if false {
				} else {
					*((*string)(x.DocumentationURL)) = r.DecodeString()
				}
			}
		case "supportUrl":
			if r.TryDecodeAsNil() {
				if x.SupportURL != nil {
					x.SupportURL = nil
				}
			} else {
				if x.SupportURL == nil {
					x.SupportURL = new(string)
				}
				yym273 := z.DecBinary()
				_ = yym273
				if false {
				} else {
					*((*string)(x.SupportURL)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys238)
		} // end switch yys238
	} // end for yyj238
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceClass) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BrokerName = ""
	} else {
		x.BrokerName = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Bindable = false
	} else {
		x.Bindable = bool(r.DecodeBool())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Plans = nil
	} else {
		yyv280 := &x.Plans
		yym281 := z.DecBinary()
		_ = yym281
		if false {
		} else {
			h.decSliceServicePlan((*[]ServicePlan)(yyv280), d)
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PlanUpdatable = false
	} else {
		x.PlanUpdatable = bool(r.DecodeBool())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBTags = nil
	} else {
		yyv284 := &x.OSBTags
		yym285 := z.DecBinary()
		_ = yym285
		if false {
		} else {
			z.F.DecSliceStringX(yyv284, false, d)
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBRequires = nil
	} else {
		yyv286 := &x.OSBRequires
		yym287 := z.DecBinary()
		_ = yym287
		if false {
		} else {
			z.F.DecSliceStringX(yyv286, false, d)
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBMaxDBPerNode != nil {
			x.OSBMaxDBPerNode = nil
		}
	} else {
		if x.OSBMaxDBPerNode == nil {
			x.OSBMaxDBPerNode = new(string)
		}
		yym289 := z.DecBinary()
		_ = yym289
		if false {
		} else {
			*((*string)(x.OSBMaxDBPerNode)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBDashboardOAuth2ClientID != nil {
			x.OSBDashboardOAuth2ClientID = nil
		}
	} else {
		if x.OSBDashboardOAuth2ClientID == nil {
			x.OSBDashboardOAuth2ClientID = new(string)
		}
		yym291 := z.DecBinary()
		_ = yym291
		if false {
		} else {
			*((*string)(x.OSBDashboardOAuth2ClientID)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBDashboardSecret != nil {
			x.OSBDashboardSecret = nil
		}
	} else {
		if x.OSBDashboardSecret == nil {
			x.OSBDashboardSecret = new(string)
		}
		yym293 := z.DecBinary()
		_ = yym293
		if false {
		} else {
			*((*string)(x.OSBDashboardSecret)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBDashboardRedirectURI != nil {
			x.OSBDashboardRedirectURI = nil
		}
	} else {
		if x.OSBDashboardRedirectURI == nil {
			x.OSBDashboardRedirectURI = new(string)
		}
		yym295 := z.DecBinary()
		_ = yym295
		if false {
		} else {
			*((*string)(x.OSBDashboardRedirectURI)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Description != nil {
			x.Description = nil
		}
	} else {
		if x.Description == nil {
			x.Description = new(string)
		}
		yym297 := z.DecBinary()
		_ = yym297
		if false {
		} else {
			*((*string)(x.Description)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DisplayName != nil {
			x.DisplayName = nil
		}
	} else {
		if x.DisplayName == nil {
			x.DisplayName = new(string)
		}
		yym299 := z.DecBinary()
		_ = yym299
		if false {
		} else {
			*((*string)(x.DisplayName)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ImageURL != nil {
			x.ImageURL = nil
		}
	} else {
		if x.ImageURL == nil {
			x.ImageURL = new(string)
		}
		yym301 := z.DecBinary()
		_ = yym301
		if false {
		} else {
			*((*string)(x.ImageURL)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LongDescription != nil {
			x.LongDescription = nil
		}
	} else {
		if x.LongDescription == nil {
			x.LongDescription = new(string)
		}
		yym303 := z.DecBinary()
		_ = yym303
		if false {
		} else {
			*((*string)(x.LongDescription)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ProviderDisplayName != nil {
			x.ProviderDisplayName = nil
		}
	} else {
		if x.ProviderDisplayName == nil {
			x.ProviderDisplayName = new(string)
		}
		yym305 := z.DecBinary()
		_ = yym305
		if false {
		} else {
			*((*string)(x.ProviderDisplayName)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DocumentationURL != nil {
			x.DocumentationURL = nil
		}
	} else {
		if x.DocumentationURL == nil {
			x.DocumentationURL = new(string)
		}
		yym307 := z.DecBinary()
		_ = yym307
		if false {
		} else {
			*((*string)(x.DocumentationURL)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SupportURL != nil {
			x.SupportURL = nil
		}
	} else {
		if x.SupportURL == nil {
			x.SupportURL = new(string)
		}
		yym309 := z.DecBinary()
		_ = yym309
		if false {
		} else {
			*((*string)(x.SupportURL)) = r.DecodeString()
		}
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePlan) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym310 := z.EncBinary()
		_ = yym310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep311 := !z.EncBinary()
			yy2arr311 := z.EncBasicHandle().StructToArray
			var yyq311 [6]bool
			_, _, _ = yysep311, yyq311, yy2arr311
			const yyr311 bool = false
			yyq311[3] = x.Description != nil
			yyq311[4] = len(x.Bullets) != 0
			yyq311[5] = x.DisplayName != nil
			var yynn311 int
			if yyr311 || yy2arr311 {
				r.EncodeArrayStart(6)
			} else {
				yynn311 = 3
				for _, b := range yyq311 {
					if b {
						yynn311++
					}
				}
				r.EncodeMapStart(yynn311)
				yynn311 = 0
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym313 := z.EncBinary()
				_ = yym313
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym314 := z.EncBinary()
				_ = yym314
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym316 := z.EncBinary()
				_ = yym316
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym317 := z.EncBinary()
				_ = yym317
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym319 := z.EncBinary()
				_ = yym319
				if false {
				} else {
					r.EncodeBool(bool(x.OSBFree))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbFree"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym320 := z.EncBinary()
				_ = yym320
				if false {
				} else {
					r.EncodeBool(bool(x.OSBFree))
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[3] {
					if x.Description == nil {
						r.EncodeNil()
					} else {
						yy322 := *x.Description
						yym323 := z.EncBinary()
						_ = yym323
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy322))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Description == nil {
						r.EncodeNil()
					} else {
						yy324 := *x.Description
						yym325 := z.EncBinary()
						_ = yym325
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy324))
						}
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[4] {
					if x.Bullets == nil {
						r.EncodeNil()
					} else {
						yym327 := z.EncBinary()
						_ = yym327
						if false {
						} else {
							z.F.EncSliceStringV(x.Bullets, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("bullets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Bullets == nil {
						r.EncodeNil()
					} else {
						yym328 := z.EncBinary()
						_ = yym328
						if false {
						} else {
							z.F.EncSliceStringV(x.Bullets, false, e)
						}
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[5] {
					if x.DisplayName == nil {
						r.EncodeNil()
					} else {
						yy330 := *x.DisplayName
						yym331 := z.EncBinary()
						_ = yym331
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy330))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("displayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DisplayName == nil {
						r.EncodeNil()
					} else {
						yy332 := *x.DisplayName
						yym333 := z.EncBinary()
						_ = yym333
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy332))
						}
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePlan) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym334 := z.DecBinary()
	_ = yym334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct335 := r.ContainerType()
		if yyct335 == codecSelferValueTypeMap1234 {
			yyl335 := r.ReadMapStart()
			if yyl335 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl335, d)
			}
		} else if yyct335 == codecSelferValueTypeArray1234 {
			yyl335 := r.ReadArrayStart()
			if yyl335 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl335, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePlan) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys336Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys336Slc
	var yyhl336 bool = l >= 0
	for yyj336 := 0; ; yyj336++ {
		if yyhl336 {
			if yyj336 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys336Slc = r.DecodeBytes(yys336Slc, true, true)
		yys336 := string(yys336Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys336 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbFree":
			if r.TryDecodeAsNil() {
				x.OSBFree = false
			} else {
				x.OSBFree = bool(r.DecodeBool())
			}
		case "description":
			if r.TryDecodeAsNil() {
				if x.Description != nil {
					x.Description = nil
				}
			} else {
				if x.Description == nil {
					x.Description = new(string)
				}
				yym341 := z.DecBinary()
				_ = yym341
				if false {
				} else {
					*((*string)(x.Description)) = r.DecodeString()
				}
			}
		case "bullets":
			if r.TryDecodeAsNil() {
				x.Bullets = nil
			} else {
				yyv342 := &x.Bullets
				yym343 := z.DecBinary()
				_ = yym343
				if false {
				} else {
					z.F.DecSliceStringX(yyv342, false, d)
				}
			}
		case "displayName":
			if r.TryDecodeAsNil() {
				if x.DisplayName != nil {
					x.DisplayName = nil
				}
			} else {
				if x.DisplayName == nil {
					x.DisplayName = new(string)
				}
				yym345 := z.DecBinary()
				_ = yym345
				if false {
				} else {
					*((*string)(x.DisplayName)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys336)
		} // end switch yys336
	} // end for yyj336
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePlan) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj346 int
	var yyb346 bool
	var yyhl346 bool = l >= 0
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBFree = false
	} else {
		x.OSBFree = bool(r.DecodeBool())
	}
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Description != nil {
			x.Description = nil
		}
	} else {
		if x.Description == nil {
			x.Description = new(string)
		}
		yym351 := z.DecBinary()
		_ = yym351
		if false {
		} else {
			*((*string)(x.Description)) = r.DecodeString()
		}
	}
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Bullets = nil
	} else {
		yyv352 := &x.Bullets
		yym353 := z.DecBinary()
		_ = yym353
		if false {
		} else {
			z.F.DecSliceStringX(yyv352, false, d)
		}
	}
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DisplayName != nil {
			x.DisplayName = nil
		}
	} else {
		if x.DisplayName == nil {
			x.DisplayName = new(string)
		}
		yym355 := z.DecBinary()
		_ = yym355
		if false {
		} else {
			*((*string)(x.DisplayName)) = r.DecodeString()
		}
	}
	for {
		yyj346++
		if yyhl346 {
			yyb346 = yyj346 > l
		} else {
			yyb346 = r.CheckBreak()
		}
		if yyb346 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj346-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			var yynn357 int
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				yynn357 = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
				yynn357 = 0
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSliceInstance(([]Instance)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSliceInstance(([]Instance)(x.Items), e)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct373 := r.ContainerType()
		if yyct373 == codecSelferValueTypeMap1234 {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if yyct373 == codecSelferValueTypeArray1234 {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSliceInstance((*[]Instance)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSliceInstance((*[]Instance)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Instance) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			var yynn389 int
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				yynn389 = 2
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
				yynn389 = 0
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy400 := &x.Spec
				yy400.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy401 := &x.Spec
				yy401.CodecEncodeSelf(e)
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy403 := &x.Status
				yy403.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy404 := &x.Status
				yy404.CodecEncodeSelf(e)
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Instance) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct406 := r.ContainerType()
		if yyct406 == codecSelferValueTypeMap1234 {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if yyct406 == codecSelferValueTypeArray1234 {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Instance) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = InstanceSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = InstanceStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Instance) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = InstanceSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = InstanceStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [6]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[2] = x.Parameters != nil
			yyq420[4] = x.OSBDashboardURL != nil
			yyq420[5] = x.OSBLastOperation != nil
			var yynn420 int
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(6)
			} else {
				yynn420 = 3
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
				yynn420 = 0
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym422 := z.EncBinary()
				_ = yym422
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceClassName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceClassName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym423 := z.EncBinary()
				_ = yym423
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceClassName))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym425 := z.EncBinary()
				_ = yym425
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PlanName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("planName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym426 := z.EncBinary()
				_ = yym426
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PlanName))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[2] {
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym428 := z.EncBinary()
						_ = yym428
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym428 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parameters"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym429 := z.EncBinary()
						_ = yym429
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym429 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym431 := z.EncBinary()
				_ = yym431
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym432 := z.EncBinary()
				_ = yym432
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[4] {
					if x.OSBDashboardURL == nil {
						r.EncodeNil()
					} else {
						yy434 := *x.OSBDashboardURL
						yym435 := z.EncBinary()
						_ = yym435
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy434))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbDashboardURL"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBDashboardURL == nil {
						r.EncodeNil()
					} else {
						yy436 := *x.OSBDashboardURL
						yym437 := z.EncBinary()
						_ = yym437
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy436))
						}
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[5] {
					if x.OSBLastOperation == nil {
						r.EncodeNil()
					} else {
						yy439 := *x.OSBLastOperation
						yym440 := z.EncBinary()
						_ = yym440
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy439))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbLastOperation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBLastOperation == nil {
						r.EncodeNil()
					} else {
						yy441 := *x.OSBLastOperation
						yym442 := z.EncBinary()
						_ = yym442
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy441))
						}
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym443 := z.DecBinary()
	_ = yym443
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct444 := r.ContainerType()
		if yyct444 == codecSelferValueTypeMap1234 {
			yyl444 := r.ReadMapStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl444, d)
			}
		} else if yyct444 == codecSelferValueTypeArray1234 {
			yyl444 := r.ReadArrayStart()
			if yyl444 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl444, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys445Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys445Slc
	var yyhl445 bool = l >= 0
	for yyj445 := 0; ; yyj445++ {
		if yyhl445 {
			if yyj445 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys445Slc = r.DecodeBytes(yys445Slc, true, true)
		yys445 := string(yys445Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys445 {
		case "serviceClassName":
			if r.TryDecodeAsNil() {
				x.ServiceClassName = ""
			} else {
				x.ServiceClassName = string(r.DecodeString())
			}
		case "planName":
			if r.TryDecodeAsNil() {
				x.PlanName = ""
			} else {
				x.PlanName = string(r.DecodeString())
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				if x.Parameters != nil {
					x.Parameters = nil
				}
			} else {
				if x.Parameters == nil {
					x.Parameters = new(pkg4_runtime.RawExtension)
				}
				yym449 := z.DecBinary()
				_ = yym449
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Parameters) {
				} else if !yym449 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Parameters)
				} else {
					z.DecFallback(x.Parameters, false)
				}
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbDashboardURL":
			if r.TryDecodeAsNil() {
				if x.OSBDashboardURL != nil {
					x.OSBDashboardURL = nil
				}
			} else {
				if x.OSBDashboardURL == nil {
					x.OSBDashboardURL = new(string)
				}
				yym452 := z.DecBinary()
				_ = yym452
				if false {
				} else {
					*((*string)(x.OSBDashboardURL)) = r.DecodeString()
				}
			}
		case "osbLastOperation":
			if r.TryDecodeAsNil() {
				if x.OSBLastOperation != nil {
					x.OSBLastOperation = nil
				}
			} else {
				if x.OSBLastOperation == nil {
					x.OSBLastOperation = new(string)
				}
				yym454 := z.DecBinary()
				_ = yym454
				if false {
				} else {
					*((*string)(x.OSBLastOperation)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys445)
		} // end switch yys445
	} // end for yyj445
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj455 int
	var yyb455 bool
	var yyhl455 bool = l >= 0
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceClassName = ""
	} else {
		x.ServiceClassName = string(r.DecodeString())
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PlanName = ""
	} else {
		x.PlanName = string(r.DecodeString())
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parameters != nil {
			x.Parameters = nil
		}
	} else {
		if x.Parameters == nil {
			x.Parameters = new(pkg4_runtime.RawExtension)
		}
		yym459 := z.DecBinary()
		_ = yym459
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Parameters) {
		} else if !yym459 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Parameters)
		} else {
			z.DecFallback(x.Parameters, false)
		}
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBDashboardURL != nil {
			x.OSBDashboardURL = nil
		}
	} else {
		if x.OSBDashboardURL == nil {
			x.OSBDashboardURL = new(string)
		}
		yym462 := z.DecBinary()
		_ = yym462
		if false {
		} else {
			*((*string)(x.OSBDashboardURL)) = r.DecodeString()
		}
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBLastOperation != nil {
			x.OSBLastOperation = nil
		}
	} else {
		if x.OSBLastOperation == nil {
			x.OSBLastOperation = new(string)
		}
		yym464 := z.DecBinary()
		_ = yym464
		if false {
		} else {
			*((*string)(x.OSBLastOperation)) = r.DecodeString()
		}
	}
	for {
		yyj455++
		if yyhl455 {
			yyb455 = yyj455 > l
		} else {
			yyb455 = r.CheckBreak()
		}
		if yyb455 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj455-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym465 := z.EncBinary()
		_ = yym465
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep466 := !z.EncBinary()
			yy2arr466 := z.EncBasicHandle().StructToArray
			var yyq466 [1]bool
			_, _, _ = yysep466, yyq466, yy2arr466
			const yyr466 bool = false
			var yynn466 int
			if yyr466 || yy2arr466 {
				r.EncodeArrayStart(1)
			} else {
				yynn466 = 1
				for _, b := range yyq466 {
					if b {
						yynn466++
					}
				}
				r.EncodeMapStart(yynn466)
				yynn466 = 0
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym469 := z.EncBinary()
					_ = yym469
					if false {
					} else {
						h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
					}
				}
			}
			if yyr466 || yy2arr466 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym470 := z.DecBinary()
	_ = yym470
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct471 := r.ContainerType()
		if yyct471 == codecSelferValueTypeMap1234 {
			yyl471 := r.ReadMapStart()
			if yyl471 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl471, d)
			}
		} else if yyct471 == codecSelferValueTypeArray1234 {
			yyl471 := r.ReadArrayStart()
			if yyl471 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl471, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys472Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys472Slc
	var yyhl472 bool = l >= 0
	for yyj472 := 0; ; yyj472++ {
		if yyhl472 {
			if yyj472 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys472Slc = r.DecodeBytes(yys472Slc, true, true)
		yys472 := string(yys472Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys472 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv473 := &x.Conditions
				yym474 := z.DecBinary()
				_ = yym474
				if false {
				} else {
					h.decSliceInstanceCondition((*[]InstanceCondition)(yyv473), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys472)
		} // end switch yys472
	} // end for yyj472
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj475 int
	var yyb475 bool
	var yyhl475 bool = l >= 0
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv476 := &x.Conditions
		yym477 := z.DecBinary()
		_ = yym477
		if false {
		} else {
			h.decSliceInstanceCondition((*[]InstanceCondition)(yyv476), d)
		}
	}
	for {
		yyj475++
		if yyhl475 {
			yyb475 = yyj475 > l
		} else {
			yyb475 = r.CheckBreak()
		}
		if yyb475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym478 := z.EncBinary()
		_ = yym478
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep479 := !z.EncBinary()
			yy2arr479 := z.EncBasicHandle().StructToArray
			var yyq479 [4]bool
			_, _, _ = yysep479, yyq479, yy2arr479
			const yyr479 bool = false
			var yynn479 int
			if yyr479 || yy2arr479 {
				r.EncodeArrayStart(4)
			} else {
				yynn479 = 4
				for _, b := range yyq479 {
					if b {
						yynn479++
					}
				}
				r.EncodeMapStart(yynn479)
				yynn479 = 0
			}
			if yyr479 || yy2arr479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr479 || yy2arr479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr479 || yy2arr479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym483 := z.EncBinary()
				_ = yym483
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym484 := z.EncBinary()
				_ = yym484
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr479 || yy2arr479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym486 := z.EncBinary()
				_ = yym486
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym487 := z.EncBinary()
				_ = yym487
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr479 || yy2arr479 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym488 := z.DecBinary()
	_ = yym488
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct489 := r.ContainerType()
		if yyct489 == codecSelferValueTypeMap1234 {
			yyl489 := r.ReadMapStart()
			if yyl489 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl489, d)
			}
		} else if yyct489 == codecSelferValueTypeArray1234 {
			yyl489 := r.ReadArrayStart()
			if yyl489 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl489, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys490Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys490Slc
	var yyhl490 bool = l >= 0
	for yyj490 := 0; ; yyj490++ {
		if yyhl490 {
			if yyj490 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys490Slc = r.DecodeBytes(yys490Slc, true, true)
		yys490 := string(yys490Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys490 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = InstanceConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys490)
		} // end switch yys490
	} // end for yyj490
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj495 int
	var yyb495 bool
	var yyhl495 bool = l >= 0
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = InstanceConditionType(r.DecodeString())
	}
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj495++
	if yyhl495 {
		yyb495 = yyj495 > l
	} else {
		yyb495 = r.CheckBreak()
	}
	if yyb495 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj495++
		if yyhl495 {
			yyb495 = yyj495 > l
		} else {
			yyb495 = r.CheckBreak()
		}
		if yyb495 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj495-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x InstanceConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym500 := z.EncBinary()
	_ = yym500
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstanceConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym501 := z.DecBinary()
	_ = yym501
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *BindingList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym502 := z.EncBinary()
		_ = yym502
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep503 := !z.EncBinary()
			yy2arr503 := z.EncBasicHandle().StructToArray
			var yyq503 [4]bool
			_, _, _ = yysep503, yyq503, yy2arr503
			const yyr503 bool = false
			yyq503[0] = x.Kind != ""
			yyq503[1] = x.APIVersion != ""
			yyq503[2] = true
			var yynn503 int
			if yyr503 || yy2arr503 {
				r.EncodeArrayStart(4)
			} else {
				yynn503 = 1
				for _, b := range yyq503 {
					if b {
						yynn503++
					}
				}
				r.EncodeMapStart(yynn503)
				yynn503 = 0
			}
			if yyr503 || yy2arr503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq503[0] {
					yym505 := z.EncBinary()
					_ = yym505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq503[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym506 := z.EncBinary()
					_ = yym506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr503 || yy2arr503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq503[1] {
					yym508 := z.EncBinary()
					_ = yym508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq503[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym509 := z.EncBinary()
					_ = yym509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr503 || yy2arr503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq503[2] {
					yy511 := &x.ListMeta
					yym512 := z.EncBinary()
					_ = yym512
					if false {
					} else if z.HasExtensions() && z.EncExt(yy511) {
					} else {
						z.EncFallback(yy511)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq503[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy513 := &x.ListMeta
					yym514 := z.EncBinary()
					_ = yym514
					if false {
					} else if z.HasExtensions() && z.EncExt(yy513) {
					} else {
						z.EncFallback(yy513)
					}
				}
			}
			if yyr503 || yy2arr503 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else {
						h.encSliceBinding(([]Binding)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym517 := z.EncBinary()
					_ = yym517
					if false {
					} else {
						h.encSliceBinding(([]Binding)(x.Items), e)
					}
				}
			}
			if yyr503 || yy2arr503 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym518 := z.DecBinary()
	_ = yym518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct519 := r.ContainerType()
		if yyct519 == codecSelferValueTypeMap1234 {
			yyl519 := r.ReadMapStart()
			if yyl519 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl519, d)
			}
		} else if yyct519 == codecSelferValueTypeArray1234 {
			yyl519 := r.ReadArrayStart()
			if yyl519 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys520Slc
	var yyhl520 bool = l >= 0
	for yyj520 := 0; ; yyj520++ {
		if yyhl520 {
			if yyj520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys520Slc = r.DecodeBytes(yys520Slc, true, true)
		yys520 := string(yys520Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys520 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv523 := &x.ListMeta
				yym524 := z.DecBinary()
				_ = yym524
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv523) {
				} else {
					z.DecFallback(yyv523, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv525 := &x.Items
				yym526 := z.DecBinary()
				_ = yym526
				if false {
				} else {
					h.decSliceBinding((*[]Binding)(yyv525), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys520)
		} // end switch yys520
	} // end for yyj520
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj527 int
	var yyb527 bool
	var yyhl527 bool = l >= 0
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv530 := &x.ListMeta
		yym531 := z.DecBinary()
		_ = yym531
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv530) {
		} else {
			z.DecFallback(yyv530, false)
		}
	}
	yyj527++
	if yyhl527 {
		yyb527 = yyj527 > l
	} else {
		yyb527 = r.CheckBreak()
	}
	if yyb527 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv532 := &x.Items
		yym533 := z.DecBinary()
		_ = yym533
		if false {
		} else {
			h.decSliceBinding((*[]Binding)(yyv532), d)
		}
	}
	for {
		yyj527++
		if yyhl527 {
			yyb527 = yyj527 > l
		} else {
			yyb527 = r.CheckBreak()
		}
		if yyb527 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj527-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym534 := z.EncBinary()
		_ = yym534
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep535 := !z.EncBinary()
			yy2arr535 := z.EncBasicHandle().StructToArray
			var yyq535 [5]bool
			_, _, _ = yysep535, yyq535, yy2arr535
			const yyr535 bool = false
			yyq535[0] = x.Kind != ""
			yyq535[1] = x.APIVersion != ""
			yyq535[2] = true
			var yynn535 int
			if yyr535 || yy2arr535 {
				r.EncodeArrayStart(5)
			} else {
				yynn535 = 2
				for _, b := range yyq535 {
					if b {
						yynn535++
					}
				}
				r.EncodeMapStart(yynn535)
				yynn535 = 0
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq535[0] {
					yym537 := z.EncBinary()
					_ = yym537
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq535[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym538 := z.EncBinary()
					_ = yym538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq535[1] {
					yym540 := z.EncBinary()
					_ = yym540
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq535[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym541 := z.EncBinary()
					_ = yym541
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq535[2] {
					yy543 := &x.ObjectMeta
					yy543.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq535[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy544 := &x.ObjectMeta
					yy544.CodecEncodeSelf(e)
				}
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy546 := &x.Spec
				yy546.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy547 := &x.Spec
				yy547.CodecEncodeSelf(e)
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy549 := &x.Status
				yy549.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy550 := &x.Status
				yy550.CodecEncodeSelf(e)
			}
			if yyr535 || yy2arr535 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym551 := z.DecBinary()
	_ = yym551
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct552 := r.ContainerType()
		if yyct552 == codecSelferValueTypeMap1234 {
			yyl552 := r.ReadMapStart()
			if yyl552 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl552, d)
			}
		} else if yyct552 == codecSelferValueTypeArray1234 {
			yyl552 := r.ReadArrayStart()
			if yyl552 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl552, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys553Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys553Slc
	var yyhl553 bool = l >= 0
	for yyj553 := 0; ; yyj553++ {
		if yyhl553 {
			if yyj553 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys553Slc = r.DecodeBytes(yys553Slc, true, true)
		yys553 := string(yys553Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys553 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv556 := &x.ObjectMeta
				yyv556.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = BindingSpec{}
			} else {
				yyv557 := &x.Spec
				yyv557.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = BindingStatus{}
			} else {
				yyv558 := &x.Status
				yyv558.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys553)
		} // end switch yys553
	} // end for yyj553
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj559 int
	var yyb559 bool
	var yyhl559 bool = l >= 0
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv562 := &x.ObjectMeta
		yyv562.CodecDecodeSelf(d)
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = BindingSpec{}
	} else {
		yyv563 := &x.Spec
		yyv563.CodecDecodeSelf(d)
	}
	yyj559++
	if yyhl559 {
		yyb559 = yyj559 > l
	} else {
		yyb559 = r.CheckBreak()
	}
	if yyb559 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = BindingStatus{}
	} else {
		yyv564 := &x.Status
		yyv564.CodecDecodeSelf(d)
	}
	for {
		yyj559++
		if yyhl559 {
			yyb559 = yyj559 > l
		} else {
			yyb559 = r.CheckBreak()
		}
		if yyb559 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj559-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym565 := z.EncBinary()
		_ = yym565
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep566 := !z.EncBinary()
			yy2arr566 := z.EncBasicHandle().StructToArray
			var yyq566 [4]bool
			_, _, _ = yysep566, yyq566, yy2arr566
			const yyr566 bool = false
			yyq566[1] = x.Parameters != nil
			var yynn566 int
			if yyr566 || yy2arr566 {
				r.EncodeArrayStart(4)
			} else {
				yynn566 = 3
				for _, b := range yyq566 {
					if b {
						yynn566++
					}
				}
				r.EncodeMapStart(yynn566)
				yynn566 = 0
			}
			if yyr566 || yy2arr566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy568 := &x.InstanceRef
				yy568.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("instanceRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy569 := &x.InstanceRef
				yy569.CodecEncodeSelf(e)
			}
			if yyr566 || yy2arr566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq566[1] {
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym571 := z.EncBinary()
						_ = yym571
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym571 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq566[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parameters"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym572 := z.EncBinary()
						_ = yym572
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym572 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				}
			}
			if yyr566 || yy2arr566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym574 := z.EncBinary()
				_ = yym574
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym575 := z.EncBinary()
				_ = yym575
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr566 || yy2arr566 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym577 := z.EncBinary()
				_ = yym577
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym578 := z.EncBinary()
				_ = yym578
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr566 || yy2arr566 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym579 := z.DecBinary()
	_ = yym579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct580 := r.ContainerType()
		if yyct580 == codecSelferValueTypeMap1234 {
			yyl580 := r.ReadMapStart()
			if yyl580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl580, d)
			}
		} else if yyct580 == codecSelferValueTypeArray1234 {
			yyl580 := r.ReadArrayStart()
			if yyl580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys581Slc
	var yyhl581 bool = l >= 0
	for yyj581 := 0; ; yyj581++ {
		if yyhl581 {
			if yyj581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys581Slc = r.DecodeBytes(yys581Slc, true, true)
		yys581 := string(yys581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys581 {
		case "instanceRef":
			if r.TryDecodeAsNil() {
				x.InstanceRef = pkg2_v1.LocalObjectReference{}
			} else {
				yyv582 := &x.InstanceRef
				yyv582.CodecDecodeSelf(d)
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				if x.Parameters != nil {
					x.Parameters = nil
				}
			} else {
				if x.Parameters == nil {
					x.Parameters = new(pkg4_runtime.RawExtension)
				}
				yym584 := z.DecBinary()
				_ = yym584
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Parameters) {
				} else if !yym584 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Parameters)
				} else {
					z.DecFallback(x.Parameters, false)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys581)
		} // end switch yys581
	} // end for yyj581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj587 int
	var yyb587 bool
	var yyhl587 bool = l >= 0
	yyj587++
	if yyhl587 {
		yyb587 = yyj587 > l
	} else {
		yyb587 = r.CheckBreak()
	}
	if yyb587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InstanceRef = pkg2_v1.LocalObjectReference{}
	} else {
		yyv588 := &x.InstanceRef
		yyv588.CodecDecodeSelf(d)
	}
	yyj587++
	if yyhl587 {
		yyb587 = yyj587 > l
	} else {
		yyb587 = r.CheckBreak()
	}
	if yyb587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parameters != nil {
			x.Parameters = nil
		}
	} else {
		if x.Parameters == nil {
			x.Parameters = new(pkg4_runtime.RawExtension)
		}
		yym590 := z.DecBinary()
		_ = yym590
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Parameters) {
		} else if !yym590 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Parameters)
		} else {
			z.DecFallback(x.Parameters, false)
		}
	}
	yyj587++
	if yyhl587 {
		yyb587 = yyj587 > l
	} else {
		yyb587 = r.CheckBreak()
	}
	if yyb587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj587++
	if yyhl587 {
		yyb587 = yyj587 > l
	} else {
		yyb587 = r.CheckBreak()
	}
	if yyb587 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	for {
		yyj587++
		if yyhl587 {
			yyb587 = yyj587 > l
		} else {
			yyb587 = r.CheckBreak()
		}
		if yyb587 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj587-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym593 := z.EncBinary()
		_ = yym593
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep594 := !z.EncBinary()
			yy2arr594 := z.EncBasicHandle().StructToArray
			var yyq594 [1]bool
			_, _, _ = yysep594, yyq594, yy2arr594
			const yyr594 bool = false
			var yynn594 int
			if yyr594 || yy2arr594 {
				r.EncodeArrayStart(1)
			} else {
				yynn594 = 1
				for _, b := range yyq594 {
					if b {
						yynn594++
					}
				}
				r.EncodeMapStart(yynn594)
				yynn594 = 0
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym596 := z.EncBinary()
					_ = yym596
					if false {
					} else {
						h.encSliceBindingCondition(([]BindingCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						h.encSliceBindingCondition(([]BindingCondition)(x.Conditions), e)
					}
				}
			}
			if yyr594 || yy2arr594 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym598 := z.DecBinary()
	_ = yym598
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct599 := r.ContainerType()
		if yyct599 == codecSelferValueTypeMap1234 {
			yyl599 := r.ReadMapStart()
			if yyl599 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl599, d)
			}
		} else if yyct599 == codecSelferValueTypeArray1234 {
			yyl599 := r.ReadArrayStart()
			if yyl599 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl599, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys600Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys600Slc
	var yyhl600 bool = l >= 0
	for yyj600 := 0; ; yyj600++ {
		if yyhl600 {
			if yyj600 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys600Slc = r.DecodeBytes(yys600Slc, true, true)
		yys600 := string(yys600Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys600 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv601 := &x.Conditions
				yym602 := z.DecBinary()
				_ = yym602
				if false {
				} else {
					h.decSliceBindingCondition((*[]BindingCondition)(yyv601), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys600)
		} // end switch yys600
	} // end for yyj600
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj603 int
	var yyb603 bool
	var yyhl603 bool = l >= 0
	yyj603++
	if yyhl603 {
		yyb603 = yyj603 > l
	} else {
		yyb603 = r.CheckBreak()
	}
	if yyb603 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv604 := &x.Conditions
		yym605 := z.DecBinary()
		_ = yym605
		if false {
		} else {
			h.decSliceBindingCondition((*[]BindingCondition)(yyv604), d)
		}
	}
	for {
		yyj603++
		if yyhl603 {
			yyb603 = yyj603 > l
		} else {
			yyb603 = r.CheckBreak()
		}
		if yyb603 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj603-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym606 := z.EncBinary()
		_ = yym606
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep607 := !z.EncBinary()
			yy2arr607 := z.EncBasicHandle().StructToArray
			var yyq607 [4]bool
			_, _, _ = yysep607, yyq607, yy2arr607
			const yyr607 bool = false
			var yynn607 int
			if yyr607 || yy2arr607 {
				r.EncodeArrayStart(4)
			} else {
				yynn607 = 4
				for _, b := range yyq607 {
					if b {
						yynn607++
					}
				}
				r.EncodeMapStart(yynn607)
				yynn607 = 0
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym611 := z.EncBinary()
				_ = yym611
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym612 := z.EncBinary()
				_ = yym612
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym614 := z.EncBinary()
				_ = yym614
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr607 || yy2arr607 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym616 := z.DecBinary()
	_ = yym616
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct617 := r.ContainerType()
		if yyct617 == codecSelferValueTypeMap1234 {
			yyl617 := r.ReadMapStart()
			if yyl617 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl617, d)
			}
		} else if yyct617 == codecSelferValueTypeArray1234 {
			yyl617 := r.ReadArrayStart()
			if yyl617 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl617, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys618Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys618Slc
	var yyhl618 bool = l >= 0
	for yyj618 := 0; ; yyj618++ {
		if yyhl618 {
			if yyj618 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys618Slc = r.DecodeBytes(yys618Slc, true, true)
		yys618 := string(yys618Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys618 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = BindingConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys618)
		} // end switch yys618
	} // end for yyj618
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj623 int
	var yyb623 bool
	var yyhl623 bool = l >= 0
	yyj623++
	if yyhl623 {
		yyb623 = yyj623 > l
	} else {
		yyb623 = r.CheckBreak()
	}
	if yyb623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = BindingConditionType(r.DecodeString())
	}
	yyj623++
	if yyhl623 {
		yyb623 = yyj623 > l
	} else {
		yyb623 = r.CheckBreak()
	}
	if yyb623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj623++
	if yyhl623 {
		yyb623 = yyj623 > l
	} else {
		yyb623 = r.CheckBreak()
	}
	if yyb623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj623++
	if yyhl623 {
		yyb623 = yyj623 > l
	} else {
		yyb623 = r.CheckBreak()
	}
	if yyb623 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj623++
		if yyhl623 {
			yyb623 = yyj623 > l
		} else {
			yyb623 = r.CheckBreak()
		}
		if yyb623 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj623-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x BindingConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym628 := z.EncBinary()
	_ = yym628
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *BindingConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym629 := z.DecBinary()
	_ = yym629
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceBroker(v []Broker, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv630 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy631 := &yyv630
		yy631.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBroker(v *[]Broker, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv632 := *v
	yyh632, yyl632 := z.DecSliceHelperStart()
	var yyc632 bool
	if yyl632 == 0 {
		if yyv632 == nil {
			yyv632 = []Broker{}
			yyc632 = true
		} else if len(yyv632) != 0 {
			yyv632 = yyv632[:0]
			yyc632 = true
		}
	} else if yyl632 > 0 {
		var yyrr632, yyrl632 int
		var yyrt632 bool
		if yyl632 > cap(yyv632) {

			yyrg632 := len(yyv632) > 0
			yyv2632 := yyv632
			yyrl632, yyrt632 = z.DecInferLen(yyl632, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt632 {
				if yyrl632 <= cap(yyv632) {
					yyv632 = yyv632[:yyrl632]
				} else {
					yyv632 = make([]Broker, yyrl632)
				}
			} else {
				yyv632 = make([]Broker, yyrl632)
			}
			yyc632 = true
			yyrr632 = len(yyv632)
			if yyrg632 {
				copy(yyv632, yyv2632)
			}
		} else if yyl632 != len(yyv632) {
			yyv632 = yyv632[:yyl632]
			yyc632 = true
		}
		yyj632 := 0
		for ; yyj632 < yyrr632; yyj632++ {
			yyh632.ElemContainerState(yyj632)
			if r.TryDecodeAsNil() {
				yyv632[yyj632] = Broker{}
			} else {
				yyv633 := &yyv632[yyj632]
				yyv633.CodecDecodeSelf(d)
			}

		}
		if yyrt632 {
			for ; yyj632 < yyl632; yyj632++ {
				yyv632 = append(yyv632, Broker{})
				yyh632.ElemContainerState(yyj632)
				if r.TryDecodeAsNil() {
					yyv632[yyj632] = Broker{}
				} else {
					yyv634 := &yyv632[yyj632]
					yyv634.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj632 := 0
		for ; !r.CheckBreak(); yyj632++ {

			if yyj632 >= len(yyv632) {
				yyv632 = append(yyv632, Broker{}) // var yyz632 Broker
				yyc632 = true
			}
			yyh632.ElemContainerState(yyj632)
			if yyj632 < len(yyv632) {
				if r.TryDecodeAsNil() {
					yyv632[yyj632] = Broker{}
				} else {
					yyv635 := &yyv632[yyj632]
					yyv635.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj632 < len(yyv632) {
			yyv632 = yyv632[:yyj632]
			yyc632 = true
		} else if yyj632 == 0 && yyv632 == nil {
			yyv632 = []Broker{}
			yyc632 = true
		}
	}
	yyh632.End()
	if yyc632 {
		*v = yyv632
	}
}

func (x codecSelfer1234) encSliceBrokerCondition(v []BrokerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv636 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy637 := &yyv636
		yy637.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBrokerCondition(v *[]BrokerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv638 := *v
	yyh638, yyl638 := z.DecSliceHelperStart()
	var yyc638 bool
	if yyl638 == 0 {
		if yyv638 == nil {
			yyv638 = []BrokerCondition{}
			yyc638 = true
		} else if len(yyv638) != 0 {
			yyv638 = yyv638[:0]
			yyc638 = true
		}
	} else if yyl638 > 0 {
		var yyrr638, yyrl638 int
		var yyrt638 bool
		if yyl638 > cap(yyv638) {

			yyrg638 := len(yyv638) > 0
			yyv2638 := yyv638
			yyrl638, yyrt638 = z.DecInferLen(yyl638, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt638 {
				if yyrl638 <= cap(yyv638) {
					yyv638 = yyv638[:yyrl638]
				} else {
					yyv638 = make([]BrokerCondition, yyrl638)
				}
			} else {
				yyv638 = make([]BrokerCondition, yyrl638)
			}
			yyc638 = true
			yyrr638 = len(yyv638)
			if yyrg638 {
				copy(yyv638, yyv2638)
			}
		} else if yyl638 != len(yyv638) {
			yyv638 = yyv638[:yyl638]
			yyc638 = true
		}
		yyj638 := 0
		for ; yyj638 < yyrr638; yyj638++ {
			yyh638.ElemContainerState(yyj638)
			if r.TryDecodeAsNil() {
				yyv638[yyj638] = BrokerCondition{}
			} else {
				yyv639 := &yyv638[yyj638]
				yyv639.CodecDecodeSelf(d)
			}

		}
		if yyrt638 {
			for ; yyj638 < yyl638; yyj638++ {
				yyv638 = append(yyv638, BrokerCondition{})
				yyh638.ElemContainerState(yyj638)
				if r.TryDecodeAsNil() {
					yyv638[yyj638] = BrokerCondition{}
				} else {
					yyv640 := &yyv638[yyj638]
					yyv640.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj638 := 0
		for ; !r.CheckBreak(); yyj638++ {

			if yyj638 >= len(yyv638) {
				yyv638 = append(yyv638, BrokerCondition{}) // var yyz638 BrokerCondition
				yyc638 = true
			}
			yyh638.ElemContainerState(yyj638)
			if yyj638 < len(yyv638) {
				if r.TryDecodeAsNil() {
					yyv638[yyj638] = BrokerCondition{}
				} else {
					yyv641 := &yyv638[yyj638]
					yyv641.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj638 < len(yyv638) {
			yyv638 = yyv638[:yyj638]
			yyc638 = true
		} else if yyj638 == 0 && yyv638 == nil {
			yyv638 = []BrokerCondition{}
			yyc638 = true
		}
	}
	yyh638.End()
	if yyc638 {
		*v = yyv638
	}
}

func (x codecSelfer1234) encSliceServiceClass(v []ServiceClass, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv642 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy643 := &yyv642
		yy643.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceClass(v *[]ServiceClass, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv644 := *v
	yyh644, yyl644 := z.DecSliceHelperStart()
	var yyc644 bool
	if yyl644 == 0 {
		if yyv644 == nil {
			yyv644 = []ServiceClass{}
			yyc644 = true
		} else if len(yyv644) != 0 {
			yyv644 = yyv644[:0]
			yyc644 = true
		}
	} else if yyl644 > 0 {
		var yyrr644, yyrl644 int
		var yyrt644 bool
		if yyl644 > cap(yyv644) {

			yyrg644 := len(yyv644) > 0
			yyv2644 := yyv644
			yyrl644, yyrt644 = z.DecInferLen(yyl644, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt644 {
				if yyrl644 <= cap(yyv644) {
					yyv644 = yyv644[:yyrl644]
				} else {
					yyv644 = make([]ServiceClass, yyrl644)
				}
			} else {
				yyv644 = make([]ServiceClass, yyrl644)
			}
			yyc644 = true
			yyrr644 = len(yyv644)
			if yyrg644 {
				copy(yyv644, yyv2644)
			}
		} else if yyl644 != len(yyv644) {
			yyv644 = yyv644[:yyl644]
			yyc644 = true
		}
		yyj644 := 0
		for ; yyj644 < yyrr644; yyj644++ {
			yyh644.ElemContainerState(yyj644)
			if r.TryDecodeAsNil() {
				yyv644[yyj644] = ServiceClass{}
			} else {
				yyv645 := &yyv644[yyj644]
				yyv645.CodecDecodeSelf(d)
			}

		}
		if yyrt644 {
			for ; yyj644 < yyl644; yyj644++ {
				yyv644 = append(yyv644, ServiceClass{})
				yyh644.ElemContainerState(yyj644)
				if r.TryDecodeAsNil() {
					yyv644[yyj644] = ServiceClass{}
				} else {
					yyv646 := &yyv644[yyj644]
					yyv646.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj644 := 0
		for ; !r.CheckBreak(); yyj644++ {

			if yyj644 >= len(yyv644) {
				yyv644 = append(yyv644, ServiceClass{}) // var yyz644 ServiceClass
				yyc644 = true
			}
			yyh644.ElemContainerState(yyj644)
			if yyj644 < len(yyv644) {
				if r.TryDecodeAsNil() {
					yyv644[yyj644] = ServiceClass{}
				} else {
					yyv647 := &yyv644[yyj644]
					yyv647.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj644 < len(yyv644) {
			yyv644 = yyv644[:yyj644]
			yyc644 = true
		} else if yyj644 == 0 && yyv644 == nil {
			yyv644 = []ServiceClass{}
			yyc644 = true
		}
	}
	yyh644.End()
	if yyc644 {
		*v = yyv644
	}
}

func (x codecSelfer1234) encSliceServicePlan(v []ServicePlan, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv648 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy649 := &yyv648
		yy649.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePlan(v *[]ServicePlan, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv650 := *v
	yyh650, yyl650 := z.DecSliceHelperStart()
	var yyc650 bool
	if yyl650 == 0 {
		if yyv650 == nil {
			yyv650 = []ServicePlan{}
			yyc650 = true
		} else if len(yyv650) != 0 {
			yyv650 = yyv650[:0]
			yyc650 = true
		}
	} else if yyl650 > 0 {
		var yyrr650, yyrl650 int
		var yyrt650 bool
		if yyl650 > cap(yyv650) {

			yyrg650 := len(yyv650) > 0
			yyv2650 := yyv650
			yyrl650, yyrt650 = z.DecInferLen(yyl650, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt650 {
				if yyrl650 <= cap(yyv650) {
					yyv650 = yyv650[:yyrl650]
				} else {
					yyv650 = make([]ServicePlan, yyrl650)
				}
			} else {
				yyv650 = make([]ServicePlan, yyrl650)
			}
			yyc650 = true
			yyrr650 = len(yyv650)
			if yyrg650 {
				copy(yyv650, yyv2650)
			}
		} else if yyl650 != len(yyv650) {
			yyv650 = yyv650[:yyl650]
			yyc650 = true
		}
		yyj650 := 0
		for ; yyj650 < yyrr650; yyj650++ {
			yyh650.ElemContainerState(yyj650)
			if r.TryDecodeAsNil() {
				yyv650[yyj650] = ServicePlan{}
			} else {
				yyv651 := &yyv650[yyj650]
				yyv651.CodecDecodeSelf(d)
			}

		}
		if yyrt650 {
			for ; yyj650 < yyl650; yyj650++ {
				yyv650 = append(yyv650, ServicePlan{})
				yyh650.ElemContainerState(yyj650)
				if r.TryDecodeAsNil() {
					yyv650[yyj650] = ServicePlan{}
				} else {
					yyv652 := &yyv650[yyj650]
					yyv652.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj650 := 0
		for ; !r.CheckBreak(); yyj650++ {

			if yyj650 >= len(yyv650) {
				yyv650 = append(yyv650, ServicePlan{}) // var yyz650 ServicePlan
				yyc650 = true
			}
			yyh650.ElemContainerState(yyj650)
			if yyj650 < len(yyv650) {
				if r.TryDecodeAsNil() {
					yyv650[yyj650] = ServicePlan{}
				} else {
					yyv653 := &yyv650[yyj650]
					yyv653.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj650 < len(yyv650) {
			yyv650 = yyv650[:yyj650]
			yyc650 = true
		} else if yyj650 == 0 && yyv650 == nil {
			yyv650 = []ServicePlan{}
			yyc650 = true
		}
	}
	yyh650.End()
	if yyc650 {
		*v = yyv650
	}
}

func (x codecSelfer1234) encSliceInstance(v []Instance, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv654 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy655 := &yyv654
		yy655.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstance(v *[]Instance, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv656 := *v
	yyh656, yyl656 := z.DecSliceHelperStart()
	var yyc656 bool
	if yyl656 == 0 {
		if yyv656 == nil {
			yyv656 = []Instance{}
			yyc656 = true
		} else if len(yyv656) != 0 {
			yyv656 = yyv656[:0]
			yyc656 = true
		}
	} else if yyl656 > 0 {
		var yyrr656, yyrl656 int
		var yyrt656 bool
		if yyl656 > cap(yyv656) {

			yyrg656 := len(yyv656) > 0
			yyv2656 := yyv656
			yyrl656, yyrt656 = z.DecInferLen(yyl656, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt656 {
				if yyrl656 <= cap(yyv656) {
					yyv656 = yyv656[:yyrl656]
				} else {
					yyv656 = make([]Instance, yyrl656)
				}
			} else {
				yyv656 = make([]Instance, yyrl656)
			}
			yyc656 = true
			yyrr656 = len(yyv656)
			if yyrg656 {
				copy(yyv656, yyv2656)
			}
		} else if yyl656 != len(yyv656) {
			yyv656 = yyv656[:yyl656]
			yyc656 = true
		}
		yyj656 := 0
		for ; yyj656 < yyrr656; yyj656++ {
			yyh656.ElemContainerState(yyj656)
			if r.TryDecodeAsNil() {
				yyv656[yyj656] = Instance{}
			} else {
				yyv657 := &yyv656[yyj656]
				yyv657.CodecDecodeSelf(d)
			}

		}
		if yyrt656 {
			for ; yyj656 < yyl656; yyj656++ {
				yyv656 = append(yyv656, Instance{})
				yyh656.ElemContainerState(yyj656)
				if r.TryDecodeAsNil() {
					yyv656[yyj656] = Instance{}
				} else {
					yyv658 := &yyv656[yyj656]
					yyv658.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj656 := 0
		for ; !r.CheckBreak(); yyj656++ {

			if yyj656 >= len(yyv656) {
				yyv656 = append(yyv656, Instance{}) // var yyz656 Instance
				yyc656 = true
			}
			yyh656.ElemContainerState(yyj656)
			if yyj656 < len(yyv656) {
				if r.TryDecodeAsNil() {
					yyv656[yyj656] = Instance{}
				} else {
					yyv659 := &yyv656[yyj656]
					yyv659.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj656 < len(yyv656) {
			yyv656 = yyv656[:yyj656]
			yyc656 = true
		} else if yyj656 == 0 && yyv656 == nil {
			yyv656 = []Instance{}
			yyc656 = true
		}
	}
	yyh656.End()
	if yyc656 {
		*v = yyv656
	}
}

func (x codecSelfer1234) encSliceInstanceCondition(v []InstanceCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv660 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy661 := &yyv660
		yy661.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstanceCondition(v *[]InstanceCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv662 := *v
	yyh662, yyl662 := z.DecSliceHelperStart()
	var yyc662 bool
	if yyl662 == 0 {
		if yyv662 == nil {
			yyv662 = []InstanceCondition{}
			yyc662 = true
		} else if len(yyv662) != 0 {
			yyv662 = yyv662[:0]
			yyc662 = true
		}
	} else if yyl662 > 0 {
		var yyrr662, yyrl662 int
		var yyrt662 bool
		if yyl662 > cap(yyv662) {

			yyrg662 := len(yyv662) > 0
			yyv2662 := yyv662
			yyrl662, yyrt662 = z.DecInferLen(yyl662, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt662 {
				if yyrl662 <= cap(yyv662) {
					yyv662 = yyv662[:yyrl662]
				} else {
					yyv662 = make([]InstanceCondition, yyrl662)
				}
			} else {
				yyv662 = make([]InstanceCondition, yyrl662)
			}
			yyc662 = true
			yyrr662 = len(yyv662)
			if yyrg662 {
				copy(yyv662, yyv2662)
			}
		} else if yyl662 != len(yyv662) {
			yyv662 = yyv662[:yyl662]
			yyc662 = true
		}
		yyj662 := 0
		for ; yyj662 < yyrr662; yyj662++ {
			yyh662.ElemContainerState(yyj662)
			if r.TryDecodeAsNil() {
				yyv662[yyj662] = InstanceCondition{}
			} else {
				yyv663 := &yyv662[yyj662]
				yyv663.CodecDecodeSelf(d)
			}

		}
		if yyrt662 {
			for ; yyj662 < yyl662; yyj662++ {
				yyv662 = append(yyv662, InstanceCondition{})
				yyh662.ElemContainerState(yyj662)
				if r.TryDecodeAsNil() {
					yyv662[yyj662] = InstanceCondition{}
				} else {
					yyv664 := &yyv662[yyj662]
					yyv664.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj662 := 0
		for ; !r.CheckBreak(); yyj662++ {

			if yyj662 >= len(yyv662) {
				yyv662 = append(yyv662, InstanceCondition{}) // var yyz662 InstanceCondition
				yyc662 = true
			}
			yyh662.ElemContainerState(yyj662)
			if yyj662 < len(yyv662) {
				if r.TryDecodeAsNil() {
					yyv662[yyj662] = InstanceCondition{}
				} else {
					yyv665 := &yyv662[yyj662]
					yyv665.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj662 < len(yyv662) {
			yyv662 = yyv662[:yyj662]
			yyc662 = true
		} else if yyj662 == 0 && yyv662 == nil {
			yyv662 = []InstanceCondition{}
			yyc662 = true
		}
	}
	yyh662.End()
	if yyc662 {
		*v = yyv662
	}
}

func (x codecSelfer1234) encSliceBinding(v []Binding, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv666 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy667 := &yyv666
		yy667.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBinding(v *[]Binding, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv668 := *v
	yyh668, yyl668 := z.DecSliceHelperStart()
	var yyc668 bool
	if yyl668 == 0 {
		if yyv668 == nil {
			yyv668 = []Binding{}
			yyc668 = true
		} else if len(yyv668) != 0 {
			yyv668 = yyv668[:0]
			yyc668 = true
		}
	} else if yyl668 > 0 {
		var yyrr668, yyrl668 int
		var yyrt668 bool
		if yyl668 > cap(yyv668) {

			yyrg668 := len(yyv668) > 0
			yyv2668 := yyv668
			yyrl668, yyrt668 = z.DecInferLen(yyl668, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt668 {
				if yyrl668 <= cap(yyv668) {
					yyv668 = yyv668[:yyrl668]
				} else {
					yyv668 = make([]Binding, yyrl668)
				}
			} else {
				yyv668 = make([]Binding, yyrl668)
			}
			yyc668 = true
			yyrr668 = len(yyv668)
			if yyrg668 {
				copy(yyv668, yyv2668)
			}
		} else if yyl668 != len(yyv668) {
			yyv668 = yyv668[:yyl668]
			yyc668 = true
		}
		yyj668 := 0
		for ; yyj668 < yyrr668; yyj668++ {
			yyh668.ElemContainerState(yyj668)
			if r.TryDecodeAsNil() {
				yyv668[yyj668] = Binding{}
			} else {
				yyv669 := &yyv668[yyj668]
				yyv669.CodecDecodeSelf(d)
			}

		}
		if yyrt668 {
			for ; yyj668 < yyl668; yyj668++ {
				yyv668 = append(yyv668, Binding{})
				yyh668.ElemContainerState(yyj668)
				if r.TryDecodeAsNil() {
					yyv668[yyj668] = Binding{}
				} else {
					yyv670 := &yyv668[yyj668]
					yyv670.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj668 := 0
		for ; !r.CheckBreak(); yyj668++ {

			if yyj668 >= len(yyv668) {
				yyv668 = append(yyv668, Binding{}) // var yyz668 Binding
				yyc668 = true
			}
			yyh668.ElemContainerState(yyj668)
			if yyj668 < len(yyv668) {
				if r.TryDecodeAsNil() {
					yyv668[yyj668] = Binding{}
				} else {
					yyv671 := &yyv668[yyj668]
					yyv671.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj668 < len(yyv668) {
			yyv668 = yyv668[:yyj668]
			yyc668 = true
		} else if yyj668 == 0 && yyv668 == nil {
			yyv668 = []Binding{}
			yyc668 = true
		}
	}
	yyh668.End()
	if yyc668 {
		*v = yyv668
	}
}

func (x codecSelfer1234) encSliceBindingCondition(v []BindingCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv672 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy673 := &yyv672
		yy673.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBindingCondition(v *[]BindingCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv674 := *v
	yyh674, yyl674 := z.DecSliceHelperStart()
	var yyc674 bool
	if yyl674 == 0 {
		if yyv674 == nil {
			yyv674 = []BindingCondition{}
			yyc674 = true
		} else if len(yyv674) != 0 {
			yyv674 = yyv674[:0]
			yyc674 = true
		}
	} else if yyl674 > 0 {
		var yyrr674, yyrl674 int
		var yyrt674 bool
		if yyl674 > cap(yyv674) {

			yyrg674 := len(yyv674) > 0
			yyv2674 := yyv674
			yyrl674, yyrt674 = z.DecInferLen(yyl674, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt674 {
				if yyrl674 <= cap(yyv674) {
					yyv674 = yyv674[:yyrl674]
				} else {
					yyv674 = make([]BindingCondition, yyrl674)
				}
			} else {
				yyv674 = make([]BindingCondition, yyrl674)
			}
			yyc674 = true
			yyrr674 = len(yyv674)
			if yyrg674 {
				copy(yyv674, yyv2674)
			}
		} else if yyl674 != len(yyv674) {
			yyv674 = yyv674[:yyl674]
			yyc674 = true
		}
		yyj674 := 0
		for ; yyj674 < yyrr674; yyj674++ {
			yyh674.ElemContainerState(yyj674)
			if r.TryDecodeAsNil() {
				yyv674[yyj674] = BindingCondition{}
			} else {
				yyv675 := &yyv674[yyj674]
				yyv675.CodecDecodeSelf(d)
			}

		}
		if yyrt674 {
			for ; yyj674 < yyl674; yyj674++ {
				yyv674 = append(yyv674, BindingCondition{})
				yyh674.ElemContainerState(yyj674)
				if r.TryDecodeAsNil() {
					yyv674[yyj674] = BindingCondition{}
				} else {
					yyv676 := &yyv674[yyj674]
					yyv676.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj674 := 0
		for ; !r.CheckBreak(); yyj674++ {

			if yyj674 >= len(yyv674) {
				yyv674 = append(yyv674, BindingCondition{}) // var yyz674 BindingCondition
				yyc674 = true
			}
			yyh674.ElemContainerState(yyj674)
			if yyj674 < len(yyv674) {
				if r.TryDecodeAsNil() {
					yyv674[yyj674] = BindingCondition{}
				} else {
					yyv677 := &yyv674[yyj674]
					yyv677.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj674 < len(yyv674) {
			yyv674 = yyv674[:yyj674]
			yyc674 = true
		} else if yyj674 == 0 && yyv674 == nil {
			yyv674 = []BindingCondition{}
			yyc674 = true
		}
	}
	yyh674.End()
	if yyc674 {
		*v = yyv674
	}
}
