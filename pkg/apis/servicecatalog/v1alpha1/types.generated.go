/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1alpha1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg1_v1 "k8s.io/kubernetes/pkg/apis/meta/v1"
	pkg4_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_v1.ObjectMeta
		var v1 pkg1_v1.TypeMeta
		var v2 pkg4_runtime.RawExtension
		var v3 pkg3_types.UID
		var v4 time.Time
		_, _, _, _, _ = v0, v1, v2, v3, v4
	}
}

func (x *Broker) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yy10.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy11 := &x.ObjectMeta
					yy11.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy13 := &x.Spec
				yy13.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy14 := &x.Spec
				yy14.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy16 := &x.Status
				yy16.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy17 := &x.Status
				yy17.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Broker) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym18 := z.DecBinary()
	_ = yym18
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct19 := r.ContainerType()
		if yyct19 == codecSelferValueTypeMap1234 {
			yyl19 := r.ReadMapStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl19, d)
			}
		} else if yyct19 == codecSelferValueTypeArray1234 {
			yyl19 := r.ReadArrayStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl19, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Broker) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys20Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys20Slc
	var yyhl20 bool = l >= 0
	for yyj20 := 0; ; yyj20++ {
		if yyhl20 {
			if yyj20 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys20Slc = r.DecodeBytes(yys20Slc, true, true)
		yys20 := string(yys20Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys20 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv23 := &x.ObjectMeta
				yyv23.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = BrokerSpec{}
			} else {
				yyv24 := &x.Spec
				yyv24.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = BrokerStatus{}
			} else {
				yyv25 := &x.Status
				yyv25.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys20)
		} // end switch yys20
	} // end for yyj20
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Broker) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv29 := &x.ObjectMeta
		yyv29.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = BrokerSpec{}
	} else {
		yyv30 := &x.Spec
		yyv30.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = BrokerStatus{}
	} else {
		yyv31 := &x.Status
		yyv31.CodecDecodeSelf(d)
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym32 := z.EncBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep33 := !z.EncBinary()
			yy2arr33 := z.EncBasicHandle().StructToArray
			var yyq33 [4]bool
			_, _, _ = yysep33, yyq33, yy2arr33
			const yyr33 bool = false
			yyq33[0] = x.Kind != ""
			yyq33[1] = x.APIVersion != ""
			yyq33[2] = true
			var yynn33 int
			if yyr33 || yy2arr33 {
				r.EncodeArrayStart(4)
			} else {
				yynn33 = 1
				for _, b := range yyq33 {
					if b {
						yynn33++
					}
				}
				r.EncodeMapStart(yynn33)
				yynn33 = 0
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[0] {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq33[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[1] {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq33[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[2] {
					yy41 := &x.ListMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.ListMeta
					yym44 := z.EncBinary()
					_ = yym44
					if false {
					} else if z.HasExtensions() && z.EncExt(yy43) {
					} else {
						z.EncFallback(yy43)
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						h.encSliceBroker(([]Broker)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						h.encSliceBroker(([]Broker)(x.Items), e)
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym48 := z.DecBinary()
	_ = yym48
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct49 := r.ContainerType()
		if yyct49 == codecSelferValueTypeMap1234 {
			yyl49 := r.ReadMapStart()
			if yyl49 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl49, d)
			}
		} else if yyct49 == codecSelferValueTypeArray1234 {
			yyl49 := r.ReadArrayStart()
			if yyl49 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl49, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys50Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys50Slc
	var yyhl50 bool = l >= 0
	for yyj50 := 0; ; yyj50++ {
		if yyhl50 {
			if yyj50 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys50Slc = r.DecodeBytes(yys50Slc, true, true)
		yys50 := string(yys50Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys50 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv53 := &x.ListMeta
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv55 := &x.Items
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else {
					h.decSliceBroker((*[]Broker)(yyv55), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys50)
		} // end switch yys50
	} // end for yyj50
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj57 int
	var yyb57 bool
	var yyhl57 bool = l >= 0
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv60 := &x.ListMeta
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv60) {
		} else {
			z.DecFallback(yyv60, false)
		}
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv62 := &x.Items
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else {
			h.decSliceBroker((*[]Broker)(yyv62), d)
		}
	}
	for {
		yyj57++
		if yyhl57 {
			yyb57 = yyj57 > l
		} else {
			yyb57 = r.CheckBreak()
		}
		if yyb57 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj57-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym64 := z.EncBinary()
		_ = yym64
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep65 := !z.EncBinary()
			yy2arr65 := z.EncBasicHandle().StructToArray
			var yyq65 [3]bool
			_, _, _ = yysep65, yyq65, yy2arr65
			const yyr65 bool = false
			yyq65[1] = x.AuthSecret != nil
			var yynn65 int
			if yyr65 || yy2arr65 {
				r.EncodeArrayStart(3)
			} else {
				yynn65 = 2
				for _, b := range yyq65 {
					if b {
						yynn65++
					}
				}
				r.EncodeMapStart(yynn65)
				yynn65 = 0
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym67 := z.EncBinary()
				_ = yym67
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.URL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("url"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym68 := z.EncBinary()
				_ = yym68
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.URL))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq65[1] {
					if x.AuthSecret == nil {
						r.EncodeNil()
					} else {
						x.AuthSecret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq65[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("authSecret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AuthSecret == nil {
						r.EncodeNil()
					} else {
						x.AuthSecret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym71 := z.EncBinary()
				_ = yym71
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym72 := z.EncBinary()
				_ = yym72
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym73 := z.DecBinary()
	_ = yym73
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct74 := r.ContainerType()
		if yyct74 == codecSelferValueTypeMap1234 {
			yyl74 := r.ReadMapStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl74, d)
			}
		} else if yyct74 == codecSelferValueTypeArray1234 {
			yyl74 := r.ReadArrayStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl74, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys75Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys75Slc
	var yyhl75 bool = l >= 0
	for yyj75 := 0; ; yyj75++ {
		if yyhl75 {
			if yyj75 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys75Slc = r.DecodeBytes(yys75Slc, true, true)
		yys75 := string(yys75Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys75 {
		case "url":
			if r.TryDecodeAsNil() {
				x.URL = ""
			} else {
				x.URL = string(r.DecodeString())
			}
		case "authSecret":
			if r.TryDecodeAsNil() {
				if x.AuthSecret != nil {
					x.AuthSecret = nil
				}
			} else {
				if x.AuthSecret == nil {
					x.AuthSecret = new(pkg2_v1.ObjectReference)
				}
				x.AuthSecret.CodecDecodeSelf(d)
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys75)
		} // end switch yys75
	} // end for yyj75
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj79 int
	var yyb79 bool
	var yyhl79 bool = l >= 0
	yyj79++
	if yyhl79 {
		yyb79 = yyj79 > l
	} else {
		yyb79 = r.CheckBreak()
	}
	if yyb79 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.URL = ""
	} else {
		x.URL = string(r.DecodeString())
	}
	yyj79++
	if yyhl79 {
		yyb79 = yyj79 > l
	} else {
		yyb79 = r.CheckBreak()
	}
	if yyb79 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AuthSecret != nil {
			x.AuthSecret = nil
		}
	} else {
		if x.AuthSecret == nil {
			x.AuthSecret = new(pkg2_v1.ObjectReference)
		}
		x.AuthSecret.CodecDecodeSelf(d)
	}
	yyj79++
	if yyhl79 {
		yyb79 = yyj79 > l
	} else {
		yyb79 = r.CheckBreak()
	}
	if yyb79 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	for {
		yyj79++
		if yyhl79 {
			yyb79 = yyj79 > l
		} else {
			yyb79 = r.CheckBreak()
		}
		if yyb79 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj79-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym83 := z.EncBinary()
		_ = yym83
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep84 := !z.EncBinary()
			yy2arr84 := z.EncBasicHandle().StructToArray
			var yyq84 [1]bool
			_, _, _ = yysep84, yyq84, yy2arr84
			const yyr84 bool = false
			var yynn84 int
			if yyr84 || yy2arr84 {
				r.EncodeArrayStart(1)
			} else {
				yynn84 = 1
				for _, b := range yyq84 {
					if b {
						yynn84++
					}
				}
				r.EncodeMapStart(yynn84)
				yynn84 = 0
			}
			if yyr84 || yy2arr84 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym86 := z.EncBinary()
					_ = yym86
					if false {
					} else {
						h.encSliceBrokerCondition(([]BrokerCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym87 := z.EncBinary()
					_ = yym87
					if false {
					} else {
						h.encSliceBrokerCondition(([]BrokerCondition)(x.Conditions), e)
					}
				}
			}
			if yyr84 || yy2arr84 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym88 := z.DecBinary()
	_ = yym88
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct89 := r.ContainerType()
		if yyct89 == codecSelferValueTypeMap1234 {
			yyl89 := r.ReadMapStart()
			if yyl89 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl89, d)
			}
		} else if yyct89 == codecSelferValueTypeArray1234 {
			yyl89 := r.ReadArrayStart()
			if yyl89 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl89, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys90Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys90Slc
	var yyhl90 bool = l >= 0
	for yyj90 := 0; ; yyj90++ {
		if yyhl90 {
			if yyj90 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys90Slc = r.DecodeBytes(yys90Slc, true, true)
		yys90 := string(yys90Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys90 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv91 := &x.Conditions
				yym92 := z.DecBinary()
				_ = yym92
				if false {
				} else {
					h.decSliceBrokerCondition((*[]BrokerCondition)(yyv91), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys90)
		} // end switch yys90
	} // end for yyj90
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj93 int
	var yyb93 bool
	var yyhl93 bool = l >= 0
	yyj93++
	if yyhl93 {
		yyb93 = yyj93 > l
	} else {
		yyb93 = r.CheckBreak()
	}
	if yyb93 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv94 := &x.Conditions
		yym95 := z.DecBinary()
		_ = yym95
		if false {
		} else {
			h.decSliceBrokerCondition((*[]BrokerCondition)(yyv94), d)
		}
	}
	for {
		yyj93++
		if yyhl93 {
			yyb93 = yyj93 > l
		} else {
			yyb93 = r.CheckBreak()
		}
		if yyb93 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj93-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym96 := z.EncBinary()
		_ = yym96
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep97 := !z.EncBinary()
			yy2arr97 := z.EncBasicHandle().StructToArray
			var yyq97 [4]bool
			_, _, _ = yysep97, yyq97, yy2arr97
			const yyr97 bool = false
			var yynn97 int
			if yyr97 || yy2arr97 {
				r.EncodeArrayStart(4)
			} else {
				yynn97 = 4
				for _, b := range yyq97 {
					if b {
						yynn97++
					}
				}
				r.EncodeMapStart(yynn97)
				yynn97 = 0
			}
			if yyr97 || yy2arr97 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr97 || yy2arr97 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr97 || yy2arr97 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym101 := z.EncBinary()
				_ = yym101
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym102 := z.EncBinary()
				_ = yym102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr97 || yy2arr97 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym104 := z.EncBinary()
				_ = yym104
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym105 := z.EncBinary()
				_ = yym105
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr97 || yy2arr97 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym106 := z.DecBinary()
	_ = yym106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct107 := r.ContainerType()
		if yyct107 == codecSelferValueTypeMap1234 {
			yyl107 := r.ReadMapStart()
			if yyl107 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl107, d)
			}
		} else if yyct107 == codecSelferValueTypeArray1234 {
			yyl107 := r.ReadArrayStart()
			if yyl107 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys108Slc
	var yyhl108 bool = l >= 0
	for yyj108 := 0; ; yyj108++ {
		if yyhl108 {
			if yyj108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys108Slc = r.DecodeBytes(yys108Slc, true, true)
		yys108 := string(yys108Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys108 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = BrokerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys108)
		} // end switch yys108
	} // end for yyj108
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj113 int
	var yyb113 bool
	var yyhl113 bool = l >= 0
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = BrokerConditionType(r.DecodeString())
	}
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj113++
	if yyhl113 {
		yyb113 = yyj113 > l
	} else {
		yyb113 = r.CheckBreak()
	}
	if yyb113 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj113++
		if yyhl113 {
			yyb113 = yyj113 > l
		} else {
			yyb113 = r.CheckBreak()
		}
		if yyb113 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj113-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x BrokerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym118 := z.EncBinary()
	_ = yym118
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *BrokerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym119 := z.DecBinary()
	_ = yym119
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym120 := z.EncBinary()
	_ = yym120
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym121 := z.DecBinary()
	_ = yym121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceClassList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym122 := z.EncBinary()
		_ = yym122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep123 := !z.EncBinary()
			yy2arr123 := z.EncBasicHandle().StructToArray
			var yyq123 [4]bool
			_, _, _ = yysep123, yyq123, yy2arr123
			const yyr123 bool = false
			yyq123[0] = x.Kind != ""
			yyq123[1] = x.APIVersion != ""
			yyq123[2] = true
			var yynn123 int
			if yyr123 || yy2arr123 {
				r.EncodeArrayStart(4)
			} else {
				yynn123 = 1
				for _, b := range yyq123 {
					if b {
						yynn123++
					}
				}
				r.EncodeMapStart(yynn123)
				yynn123 = 0
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[0] {
					yym125 := z.EncBinary()
					_ = yym125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq123[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym126 := z.EncBinary()
					_ = yym126
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[1] {
					yym128 := z.EncBinary()
					_ = yym128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq123[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym129 := z.EncBinary()
					_ = yym129
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[2] {
					yy131 := &x.ListMeta
					yym132 := z.EncBinary()
					_ = yym132
					if false {
					} else if z.HasExtensions() && z.EncExt(yy131) {
					} else {
						z.EncFallback(yy131)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq123[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy133 := &x.ListMeta
					yym134 := z.EncBinary()
					_ = yym134
					if false {
					} else if z.HasExtensions() && z.EncExt(yy133) {
					} else {
						z.EncFallback(yy133)
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym136 := z.EncBinary()
					_ = yym136
					if false {
					} else {
						h.encSliceServiceClass(([]ServiceClass)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym137 := z.EncBinary()
					_ = yym137
					if false {
					} else {
						h.encSliceServiceClass(([]ServiceClass)(x.Items), e)
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceClassList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym138 := z.DecBinary()
	_ = yym138
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct139 := r.ContainerType()
		if yyct139 == codecSelferValueTypeMap1234 {
			yyl139 := r.ReadMapStart()
			if yyl139 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl139, d)
			}
		} else if yyct139 == codecSelferValueTypeArray1234 {
			yyl139 := r.ReadArrayStart()
			if yyl139 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl139, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceClassList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys140Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys140Slc
	var yyhl140 bool = l >= 0
	for yyj140 := 0; ; yyj140++ {
		if yyhl140 {
			if yyj140 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys140Slc = r.DecodeBytes(yys140Slc, true, true)
		yys140 := string(yys140Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys140 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv143 := &x.ListMeta
				yym144 := z.DecBinary()
				_ = yym144
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv143) {
				} else {
					z.DecFallback(yyv143, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv145 := &x.Items
				yym146 := z.DecBinary()
				_ = yym146
				if false {
				} else {
					h.decSliceServiceClass((*[]ServiceClass)(yyv145), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys140)
		} // end switch yys140
	} // end for yyj140
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceClassList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj147 int
	var yyb147 bool
	var yyhl147 bool = l >= 0
	yyj147++
	if yyhl147 {
		yyb147 = yyj147 > l
	} else {
		yyb147 = r.CheckBreak()
	}
	if yyb147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj147++
	if yyhl147 {
		yyb147 = yyj147 > l
	} else {
		yyb147 = r.CheckBreak()
	}
	if yyb147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj147++
	if yyhl147 {
		yyb147 = yyj147 > l
	} else {
		yyb147 = r.CheckBreak()
	}
	if yyb147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv150 := &x.ListMeta
		yym151 := z.DecBinary()
		_ = yym151
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv150) {
		} else {
			z.DecFallback(yyv150, false)
		}
	}
	yyj147++
	if yyhl147 {
		yyb147 = yyj147 > l
	} else {
		yyb147 = r.CheckBreak()
	}
	if yyb147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv152 := &x.Items
		yym153 := z.DecBinary()
		_ = yym153
		if false {
		} else {
			h.decSliceServiceClass((*[]ServiceClass)(yyv152), d)
		}
	}
	for {
		yyj147++
		if yyhl147 {
			yyb147 = yyj147 > l
		} else {
			yyb147 = r.CheckBreak()
		}
		if yyb147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceClass) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym154 := z.EncBinary()
		_ = yym154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep155 := !z.EncBinary()
			yy2arr155 := z.EncBasicHandle().StructToArray
			var yyq155 [21]bool
			_, _, _ = yysep155, yyq155, yy2arr155
			const yyr155 bool = false
			yyq155[0] = x.Kind != ""
			yyq155[1] = x.APIVersion != ""
			yyq155[2] = true
			yyq155[8] = len(x.OSBTags) != 0
			yyq155[9] = len(x.OSBRequires) != 0
			yyq155[10] = x.OSBMaxDBPerNode != ""
			yyq155[11] = x.OSBDashboardOAuth2ClientID != ""
			yyq155[12] = x.OSBDashboardSecret != ""
			yyq155[13] = x.OSBDashboardRedirectURI != ""
			yyq155[14] = x.Description != ""
			yyq155[15] = x.DisplayName != ""
			yyq155[16] = x.ImageURL != ""
			yyq155[17] = x.LongDescription != ""
			yyq155[18] = x.ProviderDisplayName != ""
			yyq155[19] = x.DocumentationURL != ""
			yyq155[20] = x.SupportURL != ""
			var yynn155 int
			if yyr155 || yy2arr155 {
				r.EncodeArrayStart(21)
			} else {
				yynn155 = 5
				for _, b := range yyq155 {
					if b {
						yynn155++
					}
				}
				r.EncodeMapStart(yynn155)
				yynn155 = 0
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[0] {
					yym157 := z.EncBinary()
					_ = yym157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym158 := z.EncBinary()
					_ = yym158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[1] {
					yym160 := z.EncBinary()
					_ = yym160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym161 := z.EncBinary()
					_ = yym161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[2] {
					yy163 := &x.ObjectMeta
					yy163.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq155[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy164 := &x.ObjectMeta
					yy164.CodecEncodeSelf(e)
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym166 := z.EncBinary()
				_ = yym166
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BrokerName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("brokerName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym167 := z.EncBinary()
				_ = yym167
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BrokerName))
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym169 := z.EncBinary()
				_ = yym169
				if false {
				} else {
					r.EncodeBool(bool(x.Bindable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bindable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym170 := z.EncBinary()
				_ = yym170
				if false {
				} else {
					r.EncodeBool(bool(x.Bindable))
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Plans == nil {
					r.EncodeNil()
				} else {
					yym172 := z.EncBinary()
					_ = yym172
					if false {
					} else {
						h.encSliceServicePlan(([]ServicePlan)(x.Plans), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("plans"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Plans == nil {
					r.EncodeNil()
				} else {
					yym173 := z.EncBinary()
					_ = yym173
					if false {
					} else {
						h.encSliceServicePlan(([]ServicePlan)(x.Plans), e)
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym175 := z.EncBinary()
				_ = yym175
				if false {
				} else {
					r.EncodeBool(bool(x.PlanUpdatable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("planUpdatable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym176 := z.EncBinary()
				_ = yym176
				if false {
				} else {
					r.EncodeBool(bool(x.PlanUpdatable))
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym178 := z.EncBinary()
				_ = yym178
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym179 := z.EncBinary()
				_ = yym179
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[8] {
					if x.OSBTags == nil {
						r.EncodeNil()
					} else {
						yym181 := z.EncBinary()
						_ = yym181
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBTags, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq155[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbTags"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBTags == nil {
						r.EncodeNil()
					} else {
						yym182 := z.EncBinary()
						_ = yym182
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBTags, false, e)
						}
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[9] {
					if x.OSBRequires == nil {
						r.EncodeNil()
					} else {
						yym184 := z.EncBinary()
						_ = yym184
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBRequires, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq155[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbRequires"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBRequires == nil {
						r.EncodeNil()
					} else {
						yym185 := z.EncBinary()
						_ = yym185
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBRequires, false, e)
						}
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[10] {
					yym187 := z.EncBinary()
					_ = yym187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.OSBMaxDBPerNode))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbMaxDBPerNode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym188 := z.EncBinary()
					_ = yym188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.OSBMaxDBPerNode))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[11] {
					yym190 := z.EncBinary()
					_ = yym190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardOAuth2ClientID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbDashboardOAuth2ClientID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardOAuth2ClientID))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[12] {
					yym193 := z.EncBinary()
					_ = yym193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardSecret))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbDashboardSecret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym194 := z.EncBinary()
					_ = yym194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardSecret))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[13] {
					yym196 := z.EncBinary()
					_ = yym196
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardRedirectURI))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbDashboardRedirectURI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym197 := z.EncBinary()
					_ = yym197
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardRedirectURI))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[14] {
					yym199 := z.EncBinary()
					_ = yym199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym200 := z.EncBinary()
					_ = yym200
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[15] {
					yym202 := z.EncBinary()
					_ = yym202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DisplayName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("displayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym203 := z.EncBinary()
					_ = yym203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DisplayName))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[16] {
					yym205 := z.EncBinary()
					_ = yym205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ImageURL))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imageUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym206 := z.EncBinary()
					_ = yym206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ImageURL))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[17] {
					yym208 := z.EncBinary()
					_ = yym208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LongDescription))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("longDescription"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym209 := z.EncBinary()
					_ = yym209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LongDescription))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[18] {
					yym211 := z.EncBinary()
					_ = yym211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderDisplayName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerDisplayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym212 := z.EncBinary()
					_ = yym212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderDisplayName))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[19] {
					yym214 := z.EncBinary()
					_ = yym214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DocumentationURL))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("documentationUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym215 := z.EncBinary()
					_ = yym215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DocumentationURL))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq155[20] {
					yym217 := z.EncBinary()
					_ = yym217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SupportURL))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq155[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supportUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym218 := z.EncBinary()
					_ = yym218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SupportURL))
					}
				}
			}
			if yyr155 || yy2arr155 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceClass) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym219 := z.DecBinary()
	_ = yym219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct220 := r.ContainerType()
		if yyct220 == codecSelferValueTypeMap1234 {
			yyl220 := r.ReadMapStart()
			if yyl220 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl220, d)
			}
		} else if yyct220 == codecSelferValueTypeArray1234 {
			yyl220 := r.ReadArrayStart()
			if yyl220 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl220, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceClass) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys221Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys221Slc
	var yyhl221 bool = l >= 0
	for yyj221 := 0; ; yyj221++ {
		if yyhl221 {
			if yyj221 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys221Slc = r.DecodeBytes(yys221Slc, true, true)
		yys221 := string(yys221Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys221 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv224 := &x.ObjectMeta
				yyv224.CodecDecodeSelf(d)
			}
		case "brokerName":
			if r.TryDecodeAsNil() {
				x.BrokerName = ""
			} else {
				x.BrokerName = string(r.DecodeString())
			}
		case "bindable":
			if r.TryDecodeAsNil() {
				x.Bindable = false
			} else {
				x.Bindable = bool(r.DecodeBool())
			}
		case "plans":
			if r.TryDecodeAsNil() {
				x.Plans = nil
			} else {
				yyv227 := &x.Plans
				yym228 := z.DecBinary()
				_ = yym228
				if false {
				} else {
					h.decSliceServicePlan((*[]ServicePlan)(yyv227), d)
				}
			}
		case "planUpdatable":
			if r.TryDecodeAsNil() {
				x.PlanUpdatable = false
			} else {
				x.PlanUpdatable = bool(r.DecodeBool())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbTags":
			if r.TryDecodeAsNil() {
				x.OSBTags = nil
			} else {
				yyv231 := &x.OSBTags
				yym232 := z.DecBinary()
				_ = yym232
				if false {
				} else {
					z.F.DecSliceStringX(yyv231, false, d)
				}
			}
		case "osbRequires":
			if r.TryDecodeAsNil() {
				x.OSBRequires = nil
			} else {
				yyv233 := &x.OSBRequires
				yym234 := z.DecBinary()
				_ = yym234
				if false {
				} else {
					z.F.DecSliceStringX(yyv233, false, d)
				}
			}
		case "osbMaxDBPerNode":
			if r.TryDecodeAsNil() {
				x.OSBMaxDBPerNode = ""
			} else {
				x.OSBMaxDBPerNode = string(r.DecodeString())
			}
		case "osbDashboardOAuth2ClientID":
			if r.TryDecodeAsNil() {
				x.OSBDashboardOAuth2ClientID = ""
			} else {
				x.OSBDashboardOAuth2ClientID = string(r.DecodeString())
			}
		case "osbDashboardSecret":
			if r.TryDecodeAsNil() {
				x.OSBDashboardSecret = ""
			} else {
				x.OSBDashboardSecret = string(r.DecodeString())
			}
		case "osbDashboardRedirectURI":
			if r.TryDecodeAsNil() {
				x.OSBDashboardRedirectURI = ""
			} else {
				x.OSBDashboardRedirectURI = string(r.DecodeString())
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "displayName":
			if r.TryDecodeAsNil() {
				x.DisplayName = ""
			} else {
				x.DisplayName = string(r.DecodeString())
			}
		case "imageUrl":
			if r.TryDecodeAsNil() {
				x.ImageURL = ""
			} else {
				x.ImageURL = string(r.DecodeString())
			}
		case "longDescription":
			if r.TryDecodeAsNil() {
				x.LongDescription = ""
			} else {
				x.LongDescription = string(r.DecodeString())
			}
		case "providerDisplayName":
			if r.TryDecodeAsNil() {
				x.ProviderDisplayName = ""
			} else {
				x.ProviderDisplayName = string(r.DecodeString())
			}
		case "documentationUrl":
			if r.TryDecodeAsNil() {
				x.DocumentationURL = ""
			} else {
				x.DocumentationURL = string(r.DecodeString())
			}
		case "supportUrl":
			if r.TryDecodeAsNil() {
				x.SupportURL = ""
			} else {
				x.SupportURL = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys221)
		} // end switch yys221
	} // end for yyj221
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceClass) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj246 int
	var yyb246 bool
	var yyhl246 bool = l >= 0
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv249 := &x.ObjectMeta
		yyv249.CodecDecodeSelf(d)
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BrokerName = ""
	} else {
		x.BrokerName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Bindable = false
	} else {
		x.Bindable = bool(r.DecodeBool())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Plans = nil
	} else {
		yyv252 := &x.Plans
		yym253 := z.DecBinary()
		_ = yym253
		if false {
		} else {
			h.decSliceServicePlan((*[]ServicePlan)(yyv252), d)
		}
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PlanUpdatable = false
	} else {
		x.PlanUpdatable = bool(r.DecodeBool())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBTags = nil
	} else {
		yyv256 := &x.OSBTags
		yym257 := z.DecBinary()
		_ = yym257
		if false {
		} else {
			z.F.DecSliceStringX(yyv256, false, d)
		}
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBRequires = nil
	} else {
		yyv258 := &x.OSBRequires
		yym259 := z.DecBinary()
		_ = yym259
		if false {
		} else {
			z.F.DecSliceStringX(yyv258, false, d)
		}
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBMaxDBPerNode = ""
	} else {
		x.OSBMaxDBPerNode = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardOAuth2ClientID = ""
	} else {
		x.OSBDashboardOAuth2ClientID = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardSecret = ""
	} else {
		x.OSBDashboardSecret = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardRedirectURI = ""
	} else {
		x.OSBDashboardRedirectURI = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DisplayName = ""
	} else {
		x.DisplayName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageURL = ""
	} else {
		x.ImageURL = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LongDescription = ""
	} else {
		x.LongDescription = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderDisplayName = ""
	} else {
		x.ProviderDisplayName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DocumentationURL = ""
	} else {
		x.DocumentationURL = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupportURL = ""
	} else {
		x.SupportURL = string(r.DecodeString())
	}
	for {
		yyj246++
		if yyhl246 {
			yyb246 = yyj246 > l
		} else {
			yyb246 = r.CheckBreak()
		}
		if yyb246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePlan) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym271 := z.EncBinary()
		_ = yym271
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep272 := !z.EncBinary()
			yy2arr272 := z.EncBasicHandle().StructToArray
			var yyq272 [6]bool
			_, _, _ = yysep272, yyq272, yy2arr272
			const yyr272 bool = false
			yyq272[3] = x.Description != ""
			yyq272[4] = len(x.Bullets) != 0
			yyq272[5] = x.DisplayName != ""
			var yynn272 int
			if yyr272 || yy2arr272 {
				r.EncodeArrayStart(6)
			} else {
				yynn272 = 3
				for _, b := range yyq272 {
					if b {
						yynn272++
					}
				}
				r.EncodeMapStart(yynn272)
				yynn272 = 0
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym274 := z.EncBinary()
				_ = yym274
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym275 := z.EncBinary()
				_ = yym275
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym277 := z.EncBinary()
				_ = yym277
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym278 := z.EncBinary()
				_ = yym278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym280 := z.EncBinary()
				_ = yym280
				if false {
				} else {
					r.EncodeBool(bool(x.OSBFree))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbFree"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym281 := z.EncBinary()
				_ = yym281
				if false {
				} else {
					r.EncodeBool(bool(x.OSBFree))
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[3] {
					yym283 := z.EncBinary()
					_ = yym283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq272[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym284 := z.EncBinary()
					_ = yym284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[4] {
					if x.Bullets == nil {
						r.EncodeNil()
					} else {
						yym286 := z.EncBinary()
						_ = yym286
						if false {
						} else {
							z.F.EncSliceStringV(x.Bullets, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq272[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("bullets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Bullets == nil {
						r.EncodeNil()
					} else {
						yym287 := z.EncBinary()
						_ = yym287
						if false {
						} else {
							z.F.EncSliceStringV(x.Bullets, false, e)
						}
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq272[5] {
					yym289 := z.EncBinary()
					_ = yym289
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DisplayName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq272[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("displayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym290 := z.EncBinary()
					_ = yym290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DisplayName))
					}
				}
			}
			if yyr272 || yy2arr272 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePlan) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym291 := z.DecBinary()
	_ = yym291
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct292 := r.ContainerType()
		if yyct292 == codecSelferValueTypeMap1234 {
			yyl292 := r.ReadMapStart()
			if yyl292 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl292, d)
			}
		} else if yyct292 == codecSelferValueTypeArray1234 {
			yyl292 := r.ReadArrayStart()
			if yyl292 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl292, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePlan) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys293Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys293Slc
	var yyhl293 bool = l >= 0
	for yyj293 := 0; ; yyj293++ {
		if yyhl293 {
			if yyj293 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys293Slc = r.DecodeBytes(yys293Slc, true, true)
		yys293 := string(yys293Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys293 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbFree":
			if r.TryDecodeAsNil() {
				x.OSBFree = false
			} else {
				x.OSBFree = bool(r.DecodeBool())
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "bullets":
			if r.TryDecodeAsNil() {
				x.Bullets = nil
			} else {
				yyv298 := &x.Bullets
				yym299 := z.DecBinary()
				_ = yym299
				if false {
				} else {
					z.F.DecSliceStringX(yyv298, false, d)
				}
			}
		case "displayName":
			if r.TryDecodeAsNil() {
				x.DisplayName = ""
			} else {
				x.DisplayName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys293)
		} // end switch yys293
	} // end for yyj293
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePlan) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj301 int
	var yyb301 bool
	var yyhl301 bool = l >= 0
	yyj301++
	if yyhl301 {
		yyb301 = yyj301 > l
	} else {
		yyb301 = r.CheckBreak()
	}
	if yyb301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj301++
	if yyhl301 {
		yyb301 = yyj301 > l
	} else {
		yyb301 = r.CheckBreak()
	}
	if yyb301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj301++
	if yyhl301 {
		yyb301 = yyj301 > l
	} else {
		yyb301 = r.CheckBreak()
	}
	if yyb301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBFree = false
	} else {
		x.OSBFree = bool(r.DecodeBool())
	}
	yyj301++
	if yyhl301 {
		yyb301 = yyj301 > l
	} else {
		yyb301 = r.CheckBreak()
	}
	if yyb301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj301++
	if yyhl301 {
		yyb301 = yyj301 > l
	} else {
		yyb301 = r.CheckBreak()
	}
	if yyb301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Bullets = nil
	} else {
		yyv306 := &x.Bullets
		yym307 := z.DecBinary()
		_ = yym307
		if false {
		} else {
			z.F.DecSliceStringX(yyv306, false, d)
		}
	}
	yyj301++
	if yyhl301 {
		yyb301 = yyj301 > l
	} else {
		yyb301 = r.CheckBreak()
	}
	if yyb301 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DisplayName = ""
	} else {
		x.DisplayName = string(r.DecodeString())
	}
	for {
		yyj301++
		if yyhl301 {
			yyb301 = yyj301 > l
		} else {
			yyb301 = r.CheckBreak()
		}
		if yyb301 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj301-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym309 := z.EncBinary()
		_ = yym309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep310 := !z.EncBinary()
			yy2arr310 := z.EncBasicHandle().StructToArray
			var yyq310 [4]bool
			_, _, _ = yysep310, yyq310, yy2arr310
			const yyr310 bool = false
			yyq310[0] = x.Kind != ""
			yyq310[1] = x.APIVersion != ""
			yyq310[2] = true
			var yynn310 int
			if yyr310 || yy2arr310 {
				r.EncodeArrayStart(4)
			} else {
				yynn310 = 1
				for _, b := range yyq310 {
					if b {
						yynn310++
					}
				}
				r.EncodeMapStart(yynn310)
				yynn310 = 0
			}
			if yyr310 || yy2arr310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq310[0] {
					yym312 := z.EncBinary()
					_ = yym312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq310[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym313 := z.EncBinary()
					_ = yym313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr310 || yy2arr310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq310[1] {
					yym315 := z.EncBinary()
					_ = yym315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq310[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym316 := z.EncBinary()
					_ = yym316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr310 || yy2arr310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq310[2] {
					yy318 := &x.ListMeta
					yym319 := z.EncBinary()
					_ = yym319
					if false {
					} else if z.HasExtensions() && z.EncExt(yy318) {
					} else {
						z.EncFallback(yy318)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq310[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy320 := &x.ListMeta
					yym321 := z.EncBinary()
					_ = yym321
					if false {
					} else if z.HasExtensions() && z.EncExt(yy320) {
					} else {
						z.EncFallback(yy320)
					}
				}
			}
			if yyr310 || yy2arr310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym323 := z.EncBinary()
					_ = yym323
					if false {
					} else {
						h.encSliceInstance(([]Instance)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym324 := z.EncBinary()
					_ = yym324
					if false {
					} else {
						h.encSliceInstance(([]Instance)(x.Items), e)
					}
				}
			}
			if yyr310 || yy2arr310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym325 := z.DecBinary()
	_ = yym325
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct326 := r.ContainerType()
		if yyct326 == codecSelferValueTypeMap1234 {
			yyl326 := r.ReadMapStart()
			if yyl326 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl326, d)
			}
		} else if yyct326 == codecSelferValueTypeArray1234 {
			yyl326 := r.ReadArrayStart()
			if yyl326 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl326, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys327Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys327Slc
	var yyhl327 bool = l >= 0
	for yyj327 := 0; ; yyj327++ {
		if yyhl327 {
			if yyj327 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys327Slc = r.DecodeBytes(yys327Slc, true, true)
		yys327 := string(yys327Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys327 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv330 := &x.ListMeta
				yym331 := z.DecBinary()
				_ = yym331
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv330) {
				} else {
					z.DecFallback(yyv330, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv332 := &x.Items
				yym333 := z.DecBinary()
				_ = yym333
				if false {
				} else {
					h.decSliceInstance((*[]Instance)(yyv332), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys327)
		} // end switch yys327
	} // end for yyj327
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj334 int
	var yyb334 bool
	var yyhl334 bool = l >= 0
	yyj334++
	if yyhl334 {
		yyb334 = yyj334 > l
	} else {
		yyb334 = r.CheckBreak()
	}
	if yyb334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj334++
	if yyhl334 {
		yyb334 = yyj334 > l
	} else {
		yyb334 = r.CheckBreak()
	}
	if yyb334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj334++
	if yyhl334 {
		yyb334 = yyj334 > l
	} else {
		yyb334 = r.CheckBreak()
	}
	if yyb334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv337 := &x.ListMeta
		yym338 := z.DecBinary()
		_ = yym338
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv337) {
		} else {
			z.DecFallback(yyv337, false)
		}
	}
	yyj334++
	if yyhl334 {
		yyb334 = yyj334 > l
	} else {
		yyb334 = r.CheckBreak()
	}
	if yyb334 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv339 := &x.Items
		yym340 := z.DecBinary()
		_ = yym340
		if false {
		} else {
			h.decSliceInstance((*[]Instance)(yyv339), d)
		}
	}
	for {
		yyj334++
		if yyhl334 {
			yyb334 = yyj334 > l
		} else {
			yyb334 = r.CheckBreak()
		}
		if yyb334 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj334-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Instance) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym341 := z.EncBinary()
		_ = yym341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep342 := !z.EncBinary()
			yy2arr342 := z.EncBasicHandle().StructToArray
			var yyq342 [5]bool
			_, _, _ = yysep342, yyq342, yy2arr342
			const yyr342 bool = false
			yyq342[0] = x.Kind != ""
			yyq342[1] = x.APIVersion != ""
			yyq342[2] = true
			var yynn342 int
			if yyr342 || yy2arr342 {
				r.EncodeArrayStart(5)
			} else {
				yynn342 = 2
				for _, b := range yyq342 {
					if b {
						yynn342++
					}
				}
				r.EncodeMapStart(yynn342)
				yynn342 = 0
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[0] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[1] {
					yym347 := z.EncBinary()
					_ = yym347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym348 := z.EncBinary()
					_ = yym348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq342[2] {
					yy350 := &x.ObjectMeta
					yy350.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy351 := &x.ObjectMeta
					yy351.CodecEncodeSelf(e)
				}
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy353 := &x.Spec
				yy353.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy354 := &x.Spec
				yy354.CodecEncodeSelf(e)
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy356 := &x.Status
				yy356.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy357 := &x.Status
				yy357.CodecEncodeSelf(e)
			}
			if yyr342 || yy2arr342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Instance) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym358 := z.DecBinary()
	_ = yym358
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct359 := r.ContainerType()
		if yyct359 == codecSelferValueTypeMap1234 {
			yyl359 := r.ReadMapStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl359, d)
			}
		} else if yyct359 == codecSelferValueTypeArray1234 {
			yyl359 := r.ReadArrayStart()
			if yyl359 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl359, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Instance) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys360Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys360Slc
	var yyhl360 bool = l >= 0
	for yyj360 := 0; ; yyj360++ {
		if yyhl360 {
			if yyj360 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys360Slc = r.DecodeBytes(yys360Slc, true, true)
		yys360 := string(yys360Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys360 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv363 := &x.ObjectMeta
				yyv363.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = InstanceSpec{}
			} else {
				yyv364 := &x.Spec
				yyv364.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = InstanceStatus{}
			} else {
				yyv365 := &x.Status
				yyv365.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys360)
		} // end switch yys360
	} // end for yyj360
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Instance) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj366 int
	var yyb366 bool
	var yyhl366 bool = l >= 0
	yyj366++
	if yyhl366 {
		yyb366 = yyj366 > l
	} else {
		yyb366 = r.CheckBreak()
	}
	if yyb366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj366++
	if yyhl366 {
		yyb366 = yyj366 > l
	} else {
		yyb366 = r.CheckBreak()
	}
	if yyb366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj366++
	if yyhl366 {
		yyb366 = yyj366 > l
	} else {
		yyb366 = r.CheckBreak()
	}
	if yyb366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv369 := &x.ObjectMeta
		yyv369.CodecDecodeSelf(d)
	}
	yyj366++
	if yyhl366 {
		yyb366 = yyj366 > l
	} else {
		yyb366 = r.CheckBreak()
	}
	if yyb366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = InstanceSpec{}
	} else {
		yyv370 := &x.Spec
		yyv370.CodecDecodeSelf(d)
	}
	yyj366++
	if yyhl366 {
		yyb366 = yyj366 > l
	} else {
		yyb366 = r.CheckBreak()
	}
	if yyb366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = InstanceStatus{}
	} else {
		yyv371 := &x.Status
		yyv371.CodecDecodeSelf(d)
	}
	for {
		yyj366++
		if yyhl366 {
			yyb366 = yyj366 > l
		} else {
			yyb366 = r.CheckBreak()
		}
		if yyb366 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj366-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym372 := z.EncBinary()
		_ = yym372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep373 := !z.EncBinary()
			yy2arr373 := z.EncBasicHandle().StructToArray
			var yyq373 [12]bool
			_, _, _ = yysep373, yyq373, yy2arr373
			const yyr373 bool = false
			yyq373[2] = x.Parameters != nil
			var yynn373 int
			if yyr373 || yy2arr373 {
				r.EncodeArrayStart(12)
			} else {
				yynn373 = 11
				for _, b := range yyq373 {
					if b {
						yynn373++
					}
				}
				r.EncodeMapStart(yynn373)
				yynn373 = 0
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym375 := z.EncBinary()
				_ = yym375
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceClassName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceClassName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym376 := z.EncBinary()
				_ = yym376
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceClassName))
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym378 := z.EncBinary()
				_ = yym378
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PlanName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("planName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym379 := z.EncBinary()
				_ = yym379
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PlanName))
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq373[2] {
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym381 := z.EncBinary()
						_ = yym381
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym381 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq373[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parameters"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym382 := z.EncBinary()
						_ = yym382
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym382 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym384 := z.EncBinary()
				_ = yym384
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym385 := z.EncBinary()
				_ = yym385
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym387 := z.EncBinary()
				_ = yym387
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBCredentials))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbCredentials"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym388 := z.EncBinary()
				_ = yym388
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBCredentials))
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym390 := z.EncBinary()
				_ = yym390
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardURL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbDashboardURL"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym391 := z.EncBinary()
				_ = yym391
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardURL))
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym393 := z.EncBinary()
				_ = yym393
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBInternalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbInternalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym394 := z.EncBinary()
				_ = yym394
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBInternalID))
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym396 := z.EncBinary()
				_ = yym396
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBServiceID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbServiceID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym397 := z.EncBinary()
				_ = yym397
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBServiceID))
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym399 := z.EncBinary()
				_ = yym399
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBPlanID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbPlanID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym400 := z.EncBinary()
				_ = yym400
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBPlanID))
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym402 := z.EncBinary()
				_ = yym402
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym403 := z.EncBinary()
				_ = yym403
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBType))
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym405 := z.EncBinary()
				_ = yym405
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBSpaceGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbSpaceGUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym406 := z.EncBinary()
				_ = yym406
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBSpaceGUID))
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym408 := z.EncBinary()
				_ = yym408
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBLastOperation))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbLastOperation"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym409 := z.EncBinary()
				_ = yym409
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBLastOperation))
				}
			}
			if yyr373 || yy2arr373 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym410 := z.DecBinary()
	_ = yym410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct411 := r.ContainerType()
		if yyct411 == codecSelferValueTypeMap1234 {
			yyl411 := r.ReadMapStart()
			if yyl411 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl411, d)
			}
		} else if yyct411 == codecSelferValueTypeArray1234 {
			yyl411 := r.ReadArrayStart()
			if yyl411 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl411, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys412Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys412Slc
	var yyhl412 bool = l >= 0
	for yyj412 := 0; ; yyj412++ {
		if yyhl412 {
			if yyj412 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys412Slc = r.DecodeBytes(yys412Slc, true, true)
		yys412 := string(yys412Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys412 {
		case "serviceClassName":
			if r.TryDecodeAsNil() {
				x.ServiceClassName = ""
			} else {
				x.ServiceClassName = string(r.DecodeString())
			}
		case "planName":
			if r.TryDecodeAsNil() {
				x.PlanName = ""
			} else {
				x.PlanName = string(r.DecodeString())
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				if x.Parameters != nil {
					x.Parameters = nil
				}
			} else {
				if x.Parameters == nil {
					x.Parameters = new(pkg4_runtime.RawExtension)
				}
				yym416 := z.DecBinary()
				_ = yym416
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Parameters) {
				} else if !yym416 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Parameters)
				} else {
					z.DecFallback(x.Parameters, false)
				}
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbCredentials":
			if r.TryDecodeAsNil() {
				x.OSBCredentials = ""
			} else {
				x.OSBCredentials = string(r.DecodeString())
			}
		case "osbDashboardURL":
			if r.TryDecodeAsNil() {
				x.OSBDashboardURL = ""
			} else {
				x.OSBDashboardURL = string(r.DecodeString())
			}
		case "osbInternalID":
			if r.TryDecodeAsNil() {
				x.OSBInternalID = ""
			} else {
				x.OSBInternalID = string(r.DecodeString())
			}
		case "osbServiceID":
			if r.TryDecodeAsNil() {
				x.OSBServiceID = ""
			} else {
				x.OSBServiceID = string(r.DecodeString())
			}
		case "osbPlanID":
			if r.TryDecodeAsNil() {
				x.OSBPlanID = ""
			} else {
				x.OSBPlanID = string(r.DecodeString())
			}
		case "osbType":
			if r.TryDecodeAsNil() {
				x.OSBType = ""
			} else {
				x.OSBType = string(r.DecodeString())
			}
		case "osbSpaceGUID":
			if r.TryDecodeAsNil() {
				x.OSBSpaceGUID = ""
			} else {
				x.OSBSpaceGUID = string(r.DecodeString())
			}
		case "osbLastOperation":
			if r.TryDecodeAsNil() {
				x.OSBLastOperation = ""
			} else {
				x.OSBLastOperation = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys412)
		} // end switch yys412
	} // end for yyj412
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj426 int
	var yyb426 bool
	var yyhl426 bool = l >= 0
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceClassName = ""
	} else {
		x.ServiceClassName = string(r.DecodeString())
	}
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PlanName = ""
	} else {
		x.PlanName = string(r.DecodeString())
	}
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parameters != nil {
			x.Parameters = nil
		}
	} else {
		if x.Parameters == nil {
			x.Parameters = new(pkg4_runtime.RawExtension)
		}
		yym430 := z.DecBinary()
		_ = yym430
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Parameters) {
		} else if !yym430 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Parameters)
		} else {
			z.DecFallback(x.Parameters, false)
		}
	}
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBCredentials = ""
	} else {
		x.OSBCredentials = string(r.DecodeString())
	}
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardURL = ""
	} else {
		x.OSBDashboardURL = string(r.DecodeString())
	}
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBInternalID = ""
	} else {
		x.OSBInternalID = string(r.DecodeString())
	}
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBServiceID = ""
	} else {
		x.OSBServiceID = string(r.DecodeString())
	}
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBPlanID = ""
	} else {
		x.OSBPlanID = string(r.DecodeString())
	}
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBType = ""
	} else {
		x.OSBType = string(r.DecodeString())
	}
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBSpaceGUID = ""
	} else {
		x.OSBSpaceGUID = string(r.DecodeString())
	}
	yyj426++
	if yyhl426 {
		yyb426 = yyj426 > l
	} else {
		yyb426 = r.CheckBreak()
	}
	if yyb426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBLastOperation = ""
	} else {
		x.OSBLastOperation = string(r.DecodeString())
	}
	for {
		yyj426++
		if yyhl426 {
			yyb426 = yyj426 > l
		} else {
			yyb426 = r.CheckBreak()
		}
		if yyb426 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj426-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym440 := z.EncBinary()
		_ = yym440
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep441 := !z.EncBinary()
			yy2arr441 := z.EncBasicHandle().StructToArray
			var yyq441 [1]bool
			_, _, _ = yysep441, yyq441, yy2arr441
			const yyr441 bool = false
			var yynn441 int
			if yyr441 || yy2arr441 {
				r.EncodeArrayStart(1)
			} else {
				yynn441 = 1
				for _, b := range yyq441 {
					if b {
						yynn441++
					}
				}
				r.EncodeMapStart(yynn441)
				yynn441 = 0
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
					}
				}
			}
			if yyr441 || yy2arr441 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym445 := z.DecBinary()
	_ = yym445
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct446 := r.ContainerType()
		if yyct446 == codecSelferValueTypeMap1234 {
			yyl446 := r.ReadMapStart()
			if yyl446 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl446, d)
			}
		} else if yyct446 == codecSelferValueTypeArray1234 {
			yyl446 := r.ReadArrayStart()
			if yyl446 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl446, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys447Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys447Slc
	var yyhl447 bool = l >= 0
	for yyj447 := 0; ; yyj447++ {
		if yyhl447 {
			if yyj447 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys447Slc = r.DecodeBytes(yys447Slc, true, true)
		yys447 := string(yys447Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys447 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv448 := &x.Conditions
				yym449 := z.DecBinary()
				_ = yym449
				if false {
				} else {
					h.decSliceInstanceCondition((*[]InstanceCondition)(yyv448), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys447)
		} // end switch yys447
	} // end for yyj447
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj450 int
	var yyb450 bool
	var yyhl450 bool = l >= 0
	yyj450++
	if yyhl450 {
		yyb450 = yyj450 > l
	} else {
		yyb450 = r.CheckBreak()
	}
	if yyb450 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv451 := &x.Conditions
		yym452 := z.DecBinary()
		_ = yym452
		if false {
		} else {
			h.decSliceInstanceCondition((*[]InstanceCondition)(yyv451), d)
		}
	}
	for {
		yyj450++
		if yyhl450 {
			yyb450 = yyj450 > l
		} else {
			yyb450 = r.CheckBreak()
		}
		if yyb450 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj450-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym453 := z.EncBinary()
		_ = yym453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep454 := !z.EncBinary()
			yy2arr454 := z.EncBasicHandle().StructToArray
			var yyq454 [4]bool
			_, _, _ = yysep454, yyq454, yy2arr454
			const yyr454 bool = false
			var yynn454 int
			if yyr454 || yy2arr454 {
				r.EncodeArrayStart(4)
			} else {
				yynn454 = 4
				for _, b := range yyq454 {
					if b {
						yynn454++
					}
				}
				r.EncodeMapStart(yynn454)
				yynn454 = 0
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym458 := z.EncBinary()
				_ = yym458
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym459 := z.EncBinary()
				_ = yym459
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym461 := z.EncBinary()
				_ = yym461
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym462 := z.EncBinary()
				_ = yym462
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr454 || yy2arr454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym463 := z.DecBinary()
	_ = yym463
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct464 := r.ContainerType()
		if yyct464 == codecSelferValueTypeMap1234 {
			yyl464 := r.ReadMapStart()
			if yyl464 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl464, d)
			}
		} else if yyct464 == codecSelferValueTypeArray1234 {
			yyl464 := r.ReadArrayStart()
			if yyl464 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl464, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys465Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys465Slc
	var yyhl465 bool = l >= 0
	for yyj465 := 0; ; yyj465++ {
		if yyhl465 {
			if yyj465 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys465Slc = r.DecodeBytes(yys465Slc, true, true)
		yys465 := string(yys465Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys465 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = InstanceConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys465)
		} // end switch yys465
	} // end for yyj465
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj470 int
	var yyb470 bool
	var yyhl470 bool = l >= 0
	yyj470++
	if yyhl470 {
		yyb470 = yyj470 > l
	} else {
		yyb470 = r.CheckBreak()
	}
	if yyb470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = InstanceConditionType(r.DecodeString())
	}
	yyj470++
	if yyhl470 {
		yyb470 = yyj470 > l
	} else {
		yyb470 = r.CheckBreak()
	}
	if yyb470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj470++
	if yyhl470 {
		yyb470 = yyj470 > l
	} else {
		yyb470 = r.CheckBreak()
	}
	if yyb470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj470++
	if yyhl470 {
		yyb470 = yyj470 > l
	} else {
		yyb470 = r.CheckBreak()
	}
	if yyb470 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj470++
		if yyhl470 {
			yyb470 = yyj470 > l
		} else {
			yyb470 = r.CheckBreak()
		}
		if yyb470 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj470-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x InstanceConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym475 := z.EncBinary()
	_ = yym475
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstanceConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym476 := z.DecBinary()
	_ = yym476
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *BindingList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym477 := z.EncBinary()
		_ = yym477
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep478 := !z.EncBinary()
			yy2arr478 := z.EncBasicHandle().StructToArray
			var yyq478 [4]bool
			_, _, _ = yysep478, yyq478, yy2arr478
			const yyr478 bool = false
			yyq478[0] = x.Kind != ""
			yyq478[1] = x.APIVersion != ""
			yyq478[2] = true
			var yynn478 int
			if yyr478 || yy2arr478 {
				r.EncodeArrayStart(4)
			} else {
				yynn478 = 1
				for _, b := range yyq478 {
					if b {
						yynn478++
					}
				}
				r.EncodeMapStart(yynn478)
				yynn478 = 0
			}
			if yyr478 || yy2arr478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq478[0] {
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq478[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym481 := z.EncBinary()
					_ = yym481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr478 || yy2arr478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq478[1] {
					yym483 := z.EncBinary()
					_ = yym483
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq478[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym484 := z.EncBinary()
					_ = yym484
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr478 || yy2arr478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq478[2] {
					yy486 := &x.ListMeta
					yym487 := z.EncBinary()
					_ = yym487
					if false {
					} else if z.HasExtensions() && z.EncExt(yy486) {
					} else {
						z.EncFallback(yy486)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq478[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy488 := &x.ListMeta
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else if z.HasExtensions() && z.EncExt(yy488) {
					} else {
						z.EncFallback(yy488)
					}
				}
			}
			if yyr478 || yy2arr478 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						h.encSliceBinding(([]Binding)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						h.encSliceBinding(([]Binding)(x.Items), e)
					}
				}
			}
			if yyr478 || yy2arr478 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym493 := z.DecBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct494 := r.ContainerType()
		if yyct494 == codecSelferValueTypeMap1234 {
			yyl494 := r.ReadMapStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl494, d)
			}
		} else if yyct494 == codecSelferValueTypeArray1234 {
			yyl494 := r.ReadArrayStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys495Slc
	var yyhl495 bool = l >= 0
	for yyj495 := 0; ; yyj495++ {
		if yyhl495 {
			if yyj495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys495Slc = r.DecodeBytes(yys495Slc, true, true)
		yys495 := string(yys495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys495 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv498 := &x.ListMeta
				yym499 := z.DecBinary()
				_ = yym499
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv498) {
				} else {
					z.DecFallback(yyv498, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv500 := &x.Items
				yym501 := z.DecBinary()
				_ = yym501
				if false {
				} else {
					h.decSliceBinding((*[]Binding)(yyv500), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys495)
		} // end switch yys495
	} // end for yyj495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj502 int
	var yyb502 bool
	var yyhl502 bool = l >= 0
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv505 := &x.ListMeta
		yym506 := z.DecBinary()
		_ = yym506
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv505) {
		} else {
			z.DecFallback(yyv505, false)
		}
	}
	yyj502++
	if yyhl502 {
		yyb502 = yyj502 > l
	} else {
		yyb502 = r.CheckBreak()
	}
	if yyb502 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv507 := &x.Items
		yym508 := z.DecBinary()
		_ = yym508
		if false {
		} else {
			h.decSliceBinding((*[]Binding)(yyv507), d)
		}
	}
	for {
		yyj502++
		if yyhl502 {
			yyb502 = yyj502 > l
		} else {
			yyb502 = r.CheckBreak()
		}
		if yyb502 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj502-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym509 := z.EncBinary()
		_ = yym509
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep510 := !z.EncBinary()
			yy2arr510 := z.EncBasicHandle().StructToArray
			var yyq510 [5]bool
			_, _, _ = yysep510, yyq510, yy2arr510
			const yyr510 bool = false
			yyq510[0] = x.Kind != ""
			yyq510[1] = x.APIVersion != ""
			yyq510[2] = true
			var yynn510 int
			if yyr510 || yy2arr510 {
				r.EncodeArrayStart(5)
			} else {
				yynn510 = 2
				for _, b := range yyq510 {
					if b {
						yynn510++
					}
				}
				r.EncodeMapStart(yynn510)
				yynn510 = 0
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq510[0] {
					yym512 := z.EncBinary()
					_ = yym512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq510[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym513 := z.EncBinary()
					_ = yym513
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq510[1] {
					yym515 := z.EncBinary()
					_ = yym515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq510[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym516 := z.EncBinary()
					_ = yym516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq510[2] {
					yy518 := &x.ObjectMeta
					yy518.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq510[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy519 := &x.ObjectMeta
					yy519.CodecEncodeSelf(e)
				}
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy521 := &x.Spec
				yy521.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy522 := &x.Spec
				yy522.CodecEncodeSelf(e)
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy524 := &x.Status
				yy524.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy525 := &x.Status
				yy525.CodecEncodeSelf(e)
			}
			if yyr510 || yy2arr510 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym526 := z.DecBinary()
	_ = yym526
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct527 := r.ContainerType()
		if yyct527 == codecSelferValueTypeMap1234 {
			yyl527 := r.ReadMapStart()
			if yyl527 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl527, d)
			}
		} else if yyct527 == codecSelferValueTypeArray1234 {
			yyl527 := r.ReadArrayStart()
			if yyl527 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl527, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys528Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys528Slc
	var yyhl528 bool = l >= 0
	for yyj528 := 0; ; yyj528++ {
		if yyhl528 {
			if yyj528 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys528Slc = r.DecodeBytes(yys528Slc, true, true)
		yys528 := string(yys528Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys528 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv531 := &x.ObjectMeta
				yyv531.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = BindingSpec{}
			} else {
				yyv532 := &x.Spec
				yyv532.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = BindingStatus{}
			} else {
				yyv533 := &x.Status
				yyv533.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys528)
		} // end switch yys528
	} // end for yyj528
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj534 int
	var yyb534 bool
	var yyhl534 bool = l >= 0
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv537 := &x.ObjectMeta
		yyv537.CodecDecodeSelf(d)
	}
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = BindingSpec{}
	} else {
		yyv538 := &x.Spec
		yyv538.CodecDecodeSelf(d)
	}
	yyj534++
	if yyhl534 {
		yyb534 = yyj534 > l
	} else {
		yyb534 = r.CheckBreak()
	}
	if yyb534 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = BindingStatus{}
	} else {
		yyv539 := &x.Status
		yyv539.CodecDecodeSelf(d)
	}
	for {
		yyj534++
		if yyhl534 {
			yyb534 = yyj534 > l
		} else {
			yyb534 = r.CheckBreak()
		}
		if yyb534 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj534-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym540 := z.EncBinary()
		_ = yym540
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep541 := !z.EncBinary()
			yy2arr541 := z.EncBasicHandle().StructToArray
			var yyq541 [7]bool
			_, _, _ = yysep541, yyq541, yy2arr541
			const yyr541 bool = false
			yyq541[2] = x.Parameters != nil
			var yynn541 int
			if yyr541 || yy2arr541 {
				r.EncodeArrayStart(7)
			} else {
				yynn541 = 6
				for _, b := range yyq541 {
					if b {
						yynn541++
					}
				}
				r.EncodeMapStart(yynn541)
				yynn541 = 0
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy543 := &x.InstanceRef
				yy543.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("instanceRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy544 := &x.InstanceRef
				yy544.CodecEncodeSelf(e)
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy546 := &x.AppLabelSelector
				yym547 := z.EncBinary()
				_ = yym547
				if false {
				} else if z.HasExtensions() && z.EncExt(yy546) {
				} else {
					z.EncFallback(yy546)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("appLabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy548 := &x.AppLabelSelector
				yym549 := z.EncBinary()
				_ = yym549
				if false {
				} else if z.HasExtensions() && z.EncExt(yy548) {
				} else {
					z.EncFallback(yy548)
				}
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq541[2] {
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym551 := z.EncBinary()
						_ = yym551
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym551 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq541[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parameters"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym552 := z.EncBinary()
						_ = yym552
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym552 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				}
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym555 := z.EncBinary()
				_ = yym555
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym557 := z.EncBinary()
				_ = yym557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym558 := z.EncBinary()
				_ = yym558
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym560 := z.EncBinary()
				_ = yym560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ConfigMapName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("configMapName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ConfigMapName))
				}
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym563 := z.EncBinary()
				_ = yym563
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym564 := z.EncBinary()
				_ = yym564
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr541 || yy2arr541 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym565 := z.DecBinary()
	_ = yym565
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct566 := r.ContainerType()
		if yyct566 == codecSelferValueTypeMap1234 {
			yyl566 := r.ReadMapStart()
			if yyl566 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl566, d)
			}
		} else if yyct566 == codecSelferValueTypeArray1234 {
			yyl566 := r.ReadArrayStart()
			if yyl566 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl566, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys567Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys567Slc
	var yyhl567 bool = l >= 0
	for yyj567 := 0; ; yyj567++ {
		if yyhl567 {
			if yyj567 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys567Slc = r.DecodeBytes(yys567Slc, true, true)
		yys567 := string(yys567Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys567 {
		case "instanceRef":
			if r.TryDecodeAsNil() {
				x.InstanceRef = pkg2_v1.ObjectReference{}
			} else {
				yyv568 := &x.InstanceRef
				yyv568.CodecDecodeSelf(d)
			}
		case "appLabelSelector":
			if r.TryDecodeAsNil() {
				x.AppLabelSelector = pkg1_v1.LabelSelector{}
			} else {
				yyv569 := &x.AppLabelSelector
				yym570 := z.DecBinary()
				_ = yym570
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv569) {
				} else {
					z.DecFallback(yyv569, false)
				}
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				if x.Parameters != nil {
					x.Parameters = nil
				}
			} else {
				if x.Parameters == nil {
					x.Parameters = new(pkg4_runtime.RawExtension)
				}
				yym572 := z.DecBinary()
				_ = yym572
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Parameters) {
				} else if !yym572 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Parameters)
				} else {
					z.DecFallback(x.Parameters, false)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "configMapName":
			if r.TryDecodeAsNil() {
				x.ConfigMapName = ""
			} else {
				x.ConfigMapName = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys567)
		} // end switch yys567
	} // end for yyj567
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj577 int
	var yyb577 bool
	var yyhl577 bool = l >= 0
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InstanceRef = pkg2_v1.ObjectReference{}
	} else {
		yyv578 := &x.InstanceRef
		yyv578.CodecDecodeSelf(d)
	}
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AppLabelSelector = pkg1_v1.LabelSelector{}
	} else {
		yyv579 := &x.AppLabelSelector
		yym580 := z.DecBinary()
		_ = yym580
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv579) {
		} else {
			z.DecFallback(yyv579, false)
		}
	}
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parameters != nil {
			x.Parameters = nil
		}
	} else {
		if x.Parameters == nil {
			x.Parameters = new(pkg4_runtime.RawExtension)
		}
		yym582 := z.DecBinary()
		_ = yym582
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Parameters) {
		} else if !yym582 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Parameters)
		} else {
			z.DecFallback(x.Parameters, false)
		}
	}
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ConfigMapName = ""
	} else {
		x.ConfigMapName = string(r.DecodeString())
	}
	yyj577++
	if yyhl577 {
		yyb577 = yyj577 > l
	} else {
		yyb577 = r.CheckBreak()
	}
	if yyb577 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	for {
		yyj577++
		if yyhl577 {
			yyb577 = yyj577 > l
		} else {
			yyb577 = r.CheckBreak()
		}
		if yyb577 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj577-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym587 := z.EncBinary()
		_ = yym587
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep588 := !z.EncBinary()
			yy2arr588 := z.EncBasicHandle().StructToArray
			var yyq588 [1]bool
			_, _, _ = yysep588, yyq588, yy2arr588
			const yyr588 bool = false
			var yynn588 int
			if yyr588 || yy2arr588 {
				r.EncodeArrayStart(1)
			} else {
				yynn588 = 1
				for _, b := range yyq588 {
					if b {
						yynn588++
					}
				}
				r.EncodeMapStart(yynn588)
				yynn588 = 0
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym590 := z.EncBinary()
					_ = yym590
					if false {
					} else {
						h.encSliceBindingCondition(([]BindingCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym591 := z.EncBinary()
					_ = yym591
					if false {
					} else {
						h.encSliceBindingCondition(([]BindingCondition)(x.Conditions), e)
					}
				}
			}
			if yyr588 || yy2arr588 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym592 := z.DecBinary()
	_ = yym592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct593 := r.ContainerType()
		if yyct593 == codecSelferValueTypeMap1234 {
			yyl593 := r.ReadMapStart()
			if yyl593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl593, d)
			}
		} else if yyct593 == codecSelferValueTypeArray1234 {
			yyl593 := r.ReadArrayStart()
			if yyl593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys594Slc
	var yyhl594 bool = l >= 0
	for yyj594 := 0; ; yyj594++ {
		if yyhl594 {
			if yyj594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys594Slc = r.DecodeBytes(yys594Slc, true, true)
		yys594 := string(yys594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys594 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv595 := &x.Conditions
				yym596 := z.DecBinary()
				_ = yym596
				if false {
				} else {
					h.decSliceBindingCondition((*[]BindingCondition)(yyv595), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys594)
		} // end switch yys594
	} // end for yyj594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj597 int
	var yyb597 bool
	var yyhl597 bool = l >= 0
	yyj597++
	if yyhl597 {
		yyb597 = yyj597 > l
	} else {
		yyb597 = r.CheckBreak()
	}
	if yyb597 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv598 := &x.Conditions
		yym599 := z.DecBinary()
		_ = yym599
		if false {
		} else {
			h.decSliceBindingCondition((*[]BindingCondition)(yyv598), d)
		}
	}
	for {
		yyj597++
		if yyhl597 {
			yyb597 = yyj597 > l
		} else {
			yyb597 = r.CheckBreak()
		}
		if yyb597 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj597-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym600 := z.EncBinary()
		_ = yym600
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep601 := !z.EncBinary()
			yy2arr601 := z.EncBasicHandle().StructToArray
			var yyq601 [4]bool
			_, _, _ = yysep601, yyq601, yy2arr601
			const yyr601 bool = false
			var yynn601 int
			if yyr601 || yy2arr601 {
				r.EncodeArrayStart(4)
			} else {
				yynn601 = 4
				for _, b := range yyq601 {
					if b {
						yynn601++
					}
				}
				r.EncodeMapStart(yynn601)
				yynn601 = 0
			}
			if yyr601 || yy2arr601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr601 || yy2arr601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr601 || yy2arr601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym605 := z.EncBinary()
				_ = yym605
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym606 := z.EncBinary()
				_ = yym606
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr601 || yy2arr601 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym608 := z.EncBinary()
				_ = yym608
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym609 := z.EncBinary()
				_ = yym609
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr601 || yy2arr601 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym610 := z.DecBinary()
	_ = yym610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct611 := r.ContainerType()
		if yyct611 == codecSelferValueTypeMap1234 {
			yyl611 := r.ReadMapStart()
			if yyl611 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl611, d)
			}
		} else if yyct611 == codecSelferValueTypeArray1234 {
			yyl611 := r.ReadArrayStart()
			if yyl611 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl611, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys612Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys612Slc
	var yyhl612 bool = l >= 0
	for yyj612 := 0; ; yyj612++ {
		if yyhl612 {
			if yyj612 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys612Slc = r.DecodeBytes(yys612Slc, true, true)
		yys612 := string(yys612Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys612 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = BindingConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys612)
		} // end switch yys612
	} // end for yyj612
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj617 int
	var yyb617 bool
	var yyhl617 bool = l >= 0
	yyj617++
	if yyhl617 {
		yyb617 = yyj617 > l
	} else {
		yyb617 = r.CheckBreak()
	}
	if yyb617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = BindingConditionType(r.DecodeString())
	}
	yyj617++
	if yyhl617 {
		yyb617 = yyj617 > l
	} else {
		yyb617 = r.CheckBreak()
	}
	if yyb617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj617++
	if yyhl617 {
		yyb617 = yyj617 > l
	} else {
		yyb617 = r.CheckBreak()
	}
	if yyb617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj617++
	if yyhl617 {
		yyb617 = yyj617 > l
	} else {
		yyb617 = r.CheckBreak()
	}
	if yyb617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj617++
		if yyhl617 {
			yyb617 = yyj617 > l
		} else {
			yyb617 = r.CheckBreak()
		}
		if yyb617 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj617-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x BindingConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym622 := z.EncBinary()
	_ = yym622
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *BindingConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym623 := z.DecBinary()
	_ = yym623
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceBroker(v []Broker, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv624 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy625 := &yyv624
		yy625.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBroker(v *[]Broker, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv626 := *v
	yyh626, yyl626 := z.DecSliceHelperStart()
	var yyc626 bool
	if yyl626 == 0 {
		if yyv626 == nil {
			yyv626 = []Broker{}
			yyc626 = true
		} else if len(yyv626) != 0 {
			yyv626 = yyv626[:0]
			yyc626 = true
		}
	} else if yyl626 > 0 {
		var yyrr626, yyrl626 int
		var yyrt626 bool
		if yyl626 > cap(yyv626) {

			yyrg626 := len(yyv626) > 0
			yyv2626 := yyv626
			yyrl626, yyrt626 = z.DecInferLen(yyl626, z.DecBasicHandle().MaxInitLen, 320)
			if yyrt626 {
				if yyrl626 <= cap(yyv626) {
					yyv626 = yyv626[:yyrl626]
				} else {
					yyv626 = make([]Broker, yyrl626)
				}
			} else {
				yyv626 = make([]Broker, yyrl626)
			}
			yyc626 = true
			yyrr626 = len(yyv626)
			if yyrg626 {
				copy(yyv626, yyv2626)
			}
		} else if yyl626 != len(yyv626) {
			yyv626 = yyv626[:yyl626]
			yyc626 = true
		}
		yyj626 := 0
		for ; yyj626 < yyrr626; yyj626++ {
			yyh626.ElemContainerState(yyj626)
			if r.TryDecodeAsNil() {
				yyv626[yyj626] = Broker{}
			} else {
				yyv627 := &yyv626[yyj626]
				yyv627.CodecDecodeSelf(d)
			}

		}
		if yyrt626 {
			for ; yyj626 < yyl626; yyj626++ {
				yyv626 = append(yyv626, Broker{})
				yyh626.ElemContainerState(yyj626)
				if r.TryDecodeAsNil() {
					yyv626[yyj626] = Broker{}
				} else {
					yyv628 := &yyv626[yyj626]
					yyv628.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj626 := 0
		for ; !r.CheckBreak(); yyj626++ {

			if yyj626 >= len(yyv626) {
				yyv626 = append(yyv626, Broker{}) // var yyz626 Broker
				yyc626 = true
			}
			yyh626.ElemContainerState(yyj626)
			if yyj626 < len(yyv626) {
				if r.TryDecodeAsNil() {
					yyv626[yyj626] = Broker{}
				} else {
					yyv629 := &yyv626[yyj626]
					yyv629.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj626 < len(yyv626) {
			yyv626 = yyv626[:yyj626]
			yyc626 = true
		} else if yyj626 == 0 && yyv626 == nil {
			yyv626 = []Broker{}
			yyc626 = true
		}
	}
	yyh626.End()
	if yyc626 {
		*v = yyv626
	}
}

func (x codecSelfer1234) encSliceBrokerCondition(v []BrokerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv630 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy631 := &yyv630
		yy631.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBrokerCondition(v *[]BrokerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv632 := *v
	yyh632, yyl632 := z.DecSliceHelperStart()
	var yyc632 bool
	if yyl632 == 0 {
		if yyv632 == nil {
			yyv632 = []BrokerCondition{}
			yyc632 = true
		} else if len(yyv632) != 0 {
			yyv632 = yyv632[:0]
			yyc632 = true
		}
	} else if yyl632 > 0 {
		var yyrr632, yyrl632 int
		var yyrt632 bool
		if yyl632 > cap(yyv632) {

			yyrg632 := len(yyv632) > 0
			yyv2632 := yyv632
			yyrl632, yyrt632 = z.DecInferLen(yyl632, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt632 {
				if yyrl632 <= cap(yyv632) {
					yyv632 = yyv632[:yyrl632]
				} else {
					yyv632 = make([]BrokerCondition, yyrl632)
				}
			} else {
				yyv632 = make([]BrokerCondition, yyrl632)
			}
			yyc632 = true
			yyrr632 = len(yyv632)
			if yyrg632 {
				copy(yyv632, yyv2632)
			}
		} else if yyl632 != len(yyv632) {
			yyv632 = yyv632[:yyl632]
			yyc632 = true
		}
		yyj632 := 0
		for ; yyj632 < yyrr632; yyj632++ {
			yyh632.ElemContainerState(yyj632)
			if r.TryDecodeAsNil() {
				yyv632[yyj632] = BrokerCondition{}
			} else {
				yyv633 := &yyv632[yyj632]
				yyv633.CodecDecodeSelf(d)
			}

		}
		if yyrt632 {
			for ; yyj632 < yyl632; yyj632++ {
				yyv632 = append(yyv632, BrokerCondition{})
				yyh632.ElemContainerState(yyj632)
				if r.TryDecodeAsNil() {
					yyv632[yyj632] = BrokerCondition{}
				} else {
					yyv634 := &yyv632[yyj632]
					yyv634.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj632 := 0
		for ; !r.CheckBreak(); yyj632++ {

			if yyj632 >= len(yyv632) {
				yyv632 = append(yyv632, BrokerCondition{}) // var yyz632 BrokerCondition
				yyc632 = true
			}
			yyh632.ElemContainerState(yyj632)
			if yyj632 < len(yyv632) {
				if r.TryDecodeAsNil() {
					yyv632[yyj632] = BrokerCondition{}
				} else {
					yyv635 := &yyv632[yyj632]
					yyv635.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj632 < len(yyv632) {
			yyv632 = yyv632[:yyj632]
			yyc632 = true
		} else if yyj632 == 0 && yyv632 == nil {
			yyv632 = []BrokerCondition{}
			yyc632 = true
		}
	}
	yyh632.End()
	if yyc632 {
		*v = yyv632
	}
}

func (x codecSelfer1234) encSliceServiceClass(v []ServiceClass, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv636 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy637 := &yyv636
		yy637.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceClass(v *[]ServiceClass, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv638 := *v
	yyh638, yyl638 := z.DecSliceHelperStart()
	var yyc638 bool
	if yyl638 == 0 {
		if yyv638 == nil {
			yyv638 = []ServiceClass{}
			yyc638 = true
		} else if len(yyv638) != 0 {
			yyv638 = yyv638[:0]
			yyc638 = true
		}
	} else if yyl638 > 0 {
		var yyrr638, yyrl638 int
		var yyrt638 bool
		if yyl638 > cap(yyv638) {

			yyrg638 := len(yyv638) > 0
			yyv2638 := yyv638
			yyrl638, yyrt638 = z.DecInferLen(yyl638, z.DecBasicHandle().MaxInitLen, 552)
			if yyrt638 {
				if yyrl638 <= cap(yyv638) {
					yyv638 = yyv638[:yyrl638]
				} else {
					yyv638 = make([]ServiceClass, yyrl638)
				}
			} else {
				yyv638 = make([]ServiceClass, yyrl638)
			}
			yyc638 = true
			yyrr638 = len(yyv638)
			if yyrg638 {
				copy(yyv638, yyv2638)
			}
		} else if yyl638 != len(yyv638) {
			yyv638 = yyv638[:yyl638]
			yyc638 = true
		}
		yyj638 := 0
		for ; yyj638 < yyrr638; yyj638++ {
			yyh638.ElemContainerState(yyj638)
			if r.TryDecodeAsNil() {
				yyv638[yyj638] = ServiceClass{}
			} else {
				yyv639 := &yyv638[yyj638]
				yyv639.CodecDecodeSelf(d)
			}

		}
		if yyrt638 {
			for ; yyj638 < yyl638; yyj638++ {
				yyv638 = append(yyv638, ServiceClass{})
				yyh638.ElemContainerState(yyj638)
				if r.TryDecodeAsNil() {
					yyv638[yyj638] = ServiceClass{}
				} else {
					yyv640 := &yyv638[yyj638]
					yyv640.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj638 := 0
		for ; !r.CheckBreak(); yyj638++ {

			if yyj638 >= len(yyv638) {
				yyv638 = append(yyv638, ServiceClass{}) // var yyz638 ServiceClass
				yyc638 = true
			}
			yyh638.ElemContainerState(yyj638)
			if yyj638 < len(yyv638) {
				if r.TryDecodeAsNil() {
					yyv638[yyj638] = ServiceClass{}
				} else {
					yyv641 := &yyv638[yyj638]
					yyv641.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj638 < len(yyv638) {
			yyv638 = yyv638[:yyj638]
			yyc638 = true
		} else if yyj638 == 0 && yyv638 == nil {
			yyv638 = []ServiceClass{}
			yyc638 = true
		}
	}
	yyh638.End()
	if yyc638 {
		*v = yyv638
	}
}

func (x codecSelfer1234) encSliceServicePlan(v []ServicePlan, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv642 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy643 := &yyv642
		yy643.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePlan(v *[]ServicePlan, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv644 := *v
	yyh644, yyl644 := z.DecSliceHelperStart()
	var yyc644 bool
	if yyl644 == 0 {
		if yyv644 == nil {
			yyv644 = []ServicePlan{}
			yyc644 = true
		} else if len(yyv644) != 0 {
			yyv644 = yyv644[:0]
			yyc644 = true
		}
	} else if yyl644 > 0 {
		var yyrr644, yyrl644 int
		var yyrt644 bool
		if yyl644 > cap(yyv644) {

			yyrg644 := len(yyv644) > 0
			yyv2644 := yyv644
			yyrl644, yyrt644 = z.DecInferLen(yyl644, z.DecBasicHandle().MaxInitLen, 96)
			if yyrt644 {
				if yyrl644 <= cap(yyv644) {
					yyv644 = yyv644[:yyrl644]
				} else {
					yyv644 = make([]ServicePlan, yyrl644)
				}
			} else {
				yyv644 = make([]ServicePlan, yyrl644)
			}
			yyc644 = true
			yyrr644 = len(yyv644)
			if yyrg644 {
				copy(yyv644, yyv2644)
			}
		} else if yyl644 != len(yyv644) {
			yyv644 = yyv644[:yyl644]
			yyc644 = true
		}
		yyj644 := 0
		for ; yyj644 < yyrr644; yyj644++ {
			yyh644.ElemContainerState(yyj644)
			if r.TryDecodeAsNil() {
				yyv644[yyj644] = ServicePlan{}
			} else {
				yyv645 := &yyv644[yyj644]
				yyv645.CodecDecodeSelf(d)
			}

		}
		if yyrt644 {
			for ; yyj644 < yyl644; yyj644++ {
				yyv644 = append(yyv644, ServicePlan{})
				yyh644.ElemContainerState(yyj644)
				if r.TryDecodeAsNil() {
					yyv644[yyj644] = ServicePlan{}
				} else {
					yyv646 := &yyv644[yyj644]
					yyv646.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj644 := 0
		for ; !r.CheckBreak(); yyj644++ {

			if yyj644 >= len(yyv644) {
				yyv644 = append(yyv644, ServicePlan{}) // var yyz644 ServicePlan
				yyc644 = true
			}
			yyh644.ElemContainerState(yyj644)
			if yyj644 < len(yyv644) {
				if r.TryDecodeAsNil() {
					yyv644[yyj644] = ServicePlan{}
				} else {
					yyv647 := &yyv644[yyj644]
					yyv647.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj644 < len(yyv644) {
			yyv644 = yyv644[:yyj644]
			yyc644 = true
		} else if yyj644 == 0 && yyv644 == nil {
			yyv644 = []ServicePlan{}
			yyc644 = true
		}
	}
	yyh644.End()
	if yyc644 {
		*v = yyv644
	}
}

func (x codecSelfer1234) encSliceInstance(v []Instance, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv648 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy649 := &yyv648
		yy649.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstance(v *[]Instance, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv650 := *v
	yyh650, yyl650 := z.DecSliceHelperStart()
	var yyc650 bool
	if yyl650 == 0 {
		if yyv650 == nil {
			yyv650 = []Instance{}
			yyc650 = true
		} else if len(yyv650) != 0 {
			yyv650 = yyv650[:0]
			yyc650 = true
		}
	} else if yyl650 > 0 {
		var yyrr650, yyrl650 int
		var yyrt650 bool
		if yyl650 > cap(yyv650) {

			yyrg650 := len(yyv650) > 0
			yyv2650 := yyv650
			yyrl650, yyrt650 = z.DecInferLen(yyl650, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt650 {
				if yyrl650 <= cap(yyv650) {
					yyv650 = yyv650[:yyrl650]
				} else {
					yyv650 = make([]Instance, yyrl650)
				}
			} else {
				yyv650 = make([]Instance, yyrl650)
			}
			yyc650 = true
			yyrr650 = len(yyv650)
			if yyrg650 {
				copy(yyv650, yyv2650)
			}
		} else if yyl650 != len(yyv650) {
			yyv650 = yyv650[:yyl650]
			yyc650 = true
		}
		yyj650 := 0
		for ; yyj650 < yyrr650; yyj650++ {
			yyh650.ElemContainerState(yyj650)
			if r.TryDecodeAsNil() {
				yyv650[yyj650] = Instance{}
			} else {
				yyv651 := &yyv650[yyj650]
				yyv651.CodecDecodeSelf(d)
			}

		}
		if yyrt650 {
			for ; yyj650 < yyl650; yyj650++ {
				yyv650 = append(yyv650, Instance{})
				yyh650.ElemContainerState(yyj650)
				if r.TryDecodeAsNil() {
					yyv650[yyj650] = Instance{}
				} else {
					yyv652 := &yyv650[yyj650]
					yyv652.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj650 := 0
		for ; !r.CheckBreak(); yyj650++ {

			if yyj650 >= len(yyv650) {
				yyv650 = append(yyv650, Instance{}) // var yyz650 Instance
				yyc650 = true
			}
			yyh650.ElemContainerState(yyj650)
			if yyj650 < len(yyv650) {
				if r.TryDecodeAsNil() {
					yyv650[yyj650] = Instance{}
				} else {
					yyv653 := &yyv650[yyj650]
					yyv653.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj650 < len(yyv650) {
			yyv650 = yyv650[:yyj650]
			yyc650 = true
		} else if yyj650 == 0 && yyv650 == nil {
			yyv650 = []Instance{}
			yyc650 = true
		}
	}
	yyh650.End()
	if yyc650 {
		*v = yyv650
	}
}

func (x codecSelfer1234) encSliceInstanceCondition(v []InstanceCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv654 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy655 := &yyv654
		yy655.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstanceCondition(v *[]InstanceCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv656 := *v
	yyh656, yyl656 := z.DecSliceHelperStart()
	var yyc656 bool
	if yyl656 == 0 {
		if yyv656 == nil {
			yyv656 = []InstanceCondition{}
			yyc656 = true
		} else if len(yyv656) != 0 {
			yyv656 = yyv656[:0]
			yyc656 = true
		}
	} else if yyl656 > 0 {
		var yyrr656, yyrl656 int
		var yyrt656 bool
		if yyl656 > cap(yyv656) {

			yyrg656 := len(yyv656) > 0
			yyv2656 := yyv656
			yyrl656, yyrt656 = z.DecInferLen(yyl656, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt656 {
				if yyrl656 <= cap(yyv656) {
					yyv656 = yyv656[:yyrl656]
				} else {
					yyv656 = make([]InstanceCondition, yyrl656)
				}
			} else {
				yyv656 = make([]InstanceCondition, yyrl656)
			}
			yyc656 = true
			yyrr656 = len(yyv656)
			if yyrg656 {
				copy(yyv656, yyv2656)
			}
		} else if yyl656 != len(yyv656) {
			yyv656 = yyv656[:yyl656]
			yyc656 = true
		}
		yyj656 := 0
		for ; yyj656 < yyrr656; yyj656++ {
			yyh656.ElemContainerState(yyj656)
			if r.TryDecodeAsNil() {
				yyv656[yyj656] = InstanceCondition{}
			} else {
				yyv657 := &yyv656[yyj656]
				yyv657.CodecDecodeSelf(d)
			}

		}
		if yyrt656 {
			for ; yyj656 < yyl656; yyj656++ {
				yyv656 = append(yyv656, InstanceCondition{})
				yyh656.ElemContainerState(yyj656)
				if r.TryDecodeAsNil() {
					yyv656[yyj656] = InstanceCondition{}
				} else {
					yyv658 := &yyv656[yyj656]
					yyv658.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj656 := 0
		for ; !r.CheckBreak(); yyj656++ {

			if yyj656 >= len(yyv656) {
				yyv656 = append(yyv656, InstanceCondition{}) // var yyz656 InstanceCondition
				yyc656 = true
			}
			yyh656.ElemContainerState(yyj656)
			if yyj656 < len(yyv656) {
				if r.TryDecodeAsNil() {
					yyv656[yyj656] = InstanceCondition{}
				} else {
					yyv659 := &yyv656[yyj656]
					yyv659.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj656 < len(yyv656) {
			yyv656 = yyv656[:yyj656]
			yyc656 = true
		} else if yyj656 == 0 && yyv656 == nil {
			yyv656 = []InstanceCondition{}
			yyc656 = true
		}
	}
	yyh656.End()
	if yyc656 {
		*v = yyv656
	}
}

func (x codecSelfer1234) encSliceBinding(v []Binding, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv660 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy661 := &yyv660
		yy661.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBinding(v *[]Binding, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv662 := *v
	yyh662, yyl662 := z.DecSliceHelperStart()
	var yyc662 bool
	if yyl662 == 0 {
		if yyv662 == nil {
			yyv662 = []Binding{}
			yyc662 = true
		} else if len(yyv662) != 0 {
			yyv662 = yyv662[:0]
			yyc662 = true
		}
	} else if yyl662 > 0 {
		var yyrr662, yyrl662 int
		var yyrt662 bool
		if yyl662 > cap(yyv662) {

			yyrg662 := len(yyv662) > 0
			yyv2662 := yyv662
			yyrl662, yyrt662 = z.DecInferLen(yyl662, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt662 {
				if yyrl662 <= cap(yyv662) {
					yyv662 = yyv662[:yyrl662]
				} else {
					yyv662 = make([]Binding, yyrl662)
				}
			} else {
				yyv662 = make([]Binding, yyrl662)
			}
			yyc662 = true
			yyrr662 = len(yyv662)
			if yyrg662 {
				copy(yyv662, yyv2662)
			}
		} else if yyl662 != len(yyv662) {
			yyv662 = yyv662[:yyl662]
			yyc662 = true
		}
		yyj662 := 0
		for ; yyj662 < yyrr662; yyj662++ {
			yyh662.ElemContainerState(yyj662)
			if r.TryDecodeAsNil() {
				yyv662[yyj662] = Binding{}
			} else {
				yyv663 := &yyv662[yyj662]
				yyv663.CodecDecodeSelf(d)
			}

		}
		if yyrt662 {
			for ; yyj662 < yyl662; yyj662++ {
				yyv662 = append(yyv662, Binding{})
				yyh662.ElemContainerState(yyj662)
				if r.TryDecodeAsNil() {
					yyv662[yyj662] = Binding{}
				} else {
					yyv664 := &yyv662[yyj662]
					yyv664.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj662 := 0
		for ; !r.CheckBreak(); yyj662++ {

			if yyj662 >= len(yyv662) {
				yyv662 = append(yyv662, Binding{}) // var yyz662 Binding
				yyc662 = true
			}
			yyh662.ElemContainerState(yyj662)
			if yyj662 < len(yyv662) {
				if r.TryDecodeAsNil() {
					yyv662[yyj662] = Binding{}
				} else {
					yyv665 := &yyv662[yyj662]
					yyv665.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj662 < len(yyv662) {
			yyv662 = yyv662[:yyj662]
			yyc662 = true
		} else if yyj662 == 0 && yyv662 == nil {
			yyv662 = []Binding{}
			yyc662 = true
		}
	}
	yyh662.End()
	if yyc662 {
		*v = yyv662
	}
}

func (x codecSelfer1234) encSliceBindingCondition(v []BindingCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv666 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy667 := &yyv666
		yy667.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBindingCondition(v *[]BindingCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv668 := *v
	yyh668, yyl668 := z.DecSliceHelperStart()
	var yyc668 bool
	if yyl668 == 0 {
		if yyv668 == nil {
			yyv668 = []BindingCondition{}
			yyc668 = true
		} else if len(yyv668) != 0 {
			yyv668 = yyv668[:0]
			yyc668 = true
		}
	} else if yyl668 > 0 {
		var yyrr668, yyrl668 int
		var yyrt668 bool
		if yyl668 > cap(yyv668) {

			yyrg668 := len(yyv668) > 0
			yyv2668 := yyv668
			yyrl668, yyrt668 = z.DecInferLen(yyl668, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt668 {
				if yyrl668 <= cap(yyv668) {
					yyv668 = yyv668[:yyrl668]
				} else {
					yyv668 = make([]BindingCondition, yyrl668)
				}
			} else {
				yyv668 = make([]BindingCondition, yyrl668)
			}
			yyc668 = true
			yyrr668 = len(yyv668)
			if yyrg668 {
				copy(yyv668, yyv2668)
			}
		} else if yyl668 != len(yyv668) {
			yyv668 = yyv668[:yyl668]
			yyc668 = true
		}
		yyj668 := 0
		for ; yyj668 < yyrr668; yyj668++ {
			yyh668.ElemContainerState(yyj668)
			if r.TryDecodeAsNil() {
				yyv668[yyj668] = BindingCondition{}
			} else {
				yyv669 := &yyv668[yyj668]
				yyv669.CodecDecodeSelf(d)
			}

		}
		if yyrt668 {
			for ; yyj668 < yyl668; yyj668++ {
				yyv668 = append(yyv668, BindingCondition{})
				yyh668.ElemContainerState(yyj668)
				if r.TryDecodeAsNil() {
					yyv668[yyj668] = BindingCondition{}
				} else {
					yyv670 := &yyv668[yyj668]
					yyv670.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj668 := 0
		for ; !r.CheckBreak(); yyj668++ {

			if yyj668 >= len(yyv668) {
				yyv668 = append(yyv668, BindingCondition{}) // var yyz668 BindingCondition
				yyc668 = true
			}
			yyh668.ElemContainerState(yyj668)
			if yyj668 < len(yyv668) {
				if r.TryDecodeAsNil() {
					yyv668[yyj668] = BindingCondition{}
				} else {
					yyv671 := &yyv668[yyj668]
					yyv671.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj668 < len(yyv668) {
			yyv668 = yyv668[:yyj668]
			yyc668 = true
		} else if yyj668 == 0 && yyv668 == nil {
			yyv668 = []BindingCondition{}
			yyc668 = true
		}
	}
	yyh668.End()
	if yyc668 {
		*v = yyv668
	}
}
