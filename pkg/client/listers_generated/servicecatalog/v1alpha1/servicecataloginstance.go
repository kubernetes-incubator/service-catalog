/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceCatalogInstanceLister helps list ServiceCatalogInstances.
type ServiceCatalogInstanceLister interface {
	// List lists all ServiceCatalogInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceCatalogInstance, err error)
	// ServiceCatalogInstances returns an object that can list and get ServiceCatalogInstances.
	ServiceCatalogInstances(namespace string) ServiceCatalogInstanceNamespaceLister
	ServiceCatalogInstanceListerExpansion
}

// serviceCatalogInstanceLister implements the ServiceCatalogInstanceLister interface.
type serviceCatalogInstanceLister struct {
	indexer cache.Indexer
}

// NewServiceCatalogInstanceLister returns a new ServiceCatalogInstanceLister.
func NewServiceCatalogInstanceLister(indexer cache.Indexer) ServiceCatalogInstanceLister {
	return &serviceCatalogInstanceLister{indexer: indexer}
}

// List lists all ServiceCatalogInstances in the indexer.
func (s *serviceCatalogInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceCatalogInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceCatalogInstance))
	})
	return ret, err
}

// ServiceCatalogInstances returns an object that can list and get ServiceCatalogInstances.
func (s *serviceCatalogInstanceLister) ServiceCatalogInstances(namespace string) ServiceCatalogInstanceNamespaceLister {
	return serviceCatalogInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceCatalogInstanceNamespaceLister helps list and get ServiceCatalogInstances.
type ServiceCatalogInstanceNamespaceLister interface {
	// List lists all ServiceCatalogInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceCatalogInstance, err error)
	// Get retrieves the ServiceCatalogInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServiceCatalogInstance, error)
	ServiceCatalogInstanceNamespaceListerExpansion
}

// serviceCatalogInstanceNamespaceLister implements the ServiceCatalogInstanceNamespaceLister
// interface.
type serviceCatalogInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceCatalogInstances in the indexer for a given namespace.
func (s serviceCatalogInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceCatalogInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceCatalogInstance))
	})
	return ret, err
}

// Get retrieves the ServiceCatalogInstance from the indexer for a given namespace and name.
func (s serviceCatalogInstanceNamespaceLister) Get(name string) (*v1alpha1.ServiceCatalogInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicecataloginstance"), name)
	}
	return obj.(*v1alpha1.ServiceCatalogInstance), nil
}
