/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceCatalogBindingLister helps list ServiceCatalogBindings.
type ServiceCatalogBindingLister interface {
	// List lists all ServiceCatalogBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceCatalogBinding, err error)
	// ServiceCatalogBindings returns an object that can list and get ServiceCatalogBindings.
	ServiceCatalogBindings(namespace string) ServiceCatalogBindingNamespaceLister
	ServiceCatalogBindingListerExpansion
}

// serviceCatalogBindingLister implements the ServiceCatalogBindingLister interface.
type serviceCatalogBindingLister struct {
	indexer cache.Indexer
}

// NewServiceCatalogBindingLister returns a new ServiceCatalogBindingLister.
func NewServiceCatalogBindingLister(indexer cache.Indexer) ServiceCatalogBindingLister {
	return &serviceCatalogBindingLister{indexer: indexer}
}

// List lists all ServiceCatalogBindings in the indexer.
func (s *serviceCatalogBindingLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceCatalogBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceCatalogBinding))
	})
	return ret, err
}

// ServiceCatalogBindings returns an object that can list and get ServiceCatalogBindings.
func (s *serviceCatalogBindingLister) ServiceCatalogBindings(namespace string) ServiceCatalogBindingNamespaceLister {
	return serviceCatalogBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceCatalogBindingNamespaceLister helps list and get ServiceCatalogBindings.
type ServiceCatalogBindingNamespaceLister interface {
	// List lists all ServiceCatalogBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceCatalogBinding, err error)
	// Get retrieves the ServiceCatalogBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServiceCatalogBinding, error)
	ServiceCatalogBindingNamespaceListerExpansion
}

// serviceCatalogBindingNamespaceLister implements the ServiceCatalogBindingNamespaceLister
// interface.
type serviceCatalogBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceCatalogBindings in the indexer for a given namespace.
func (s serviceCatalogBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceCatalogBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceCatalogBinding))
	})
	return ret, err
}

// Get retrieves the ServiceCatalogBinding from the indexer for a given namespace and name.
func (s serviceCatalogBindingNamespaceLister) Get(name string) (*v1alpha1.ServiceCatalogBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicecatalogbinding"), name)
	}
	return obj.(*v1alpha1.ServiceCatalogBinding), nil
}
